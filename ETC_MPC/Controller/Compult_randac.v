// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Compult_randac (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv38_2D = 38'b101101;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv41_FFFFFFFFFF = 41'b1111111111111111111111111111111111111111;
parameter    ap_const_lv41_10000000000 = 41'b10000000000000000000000000000000000000000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv25_1 = 25'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv20_7FFFF = 20'b1111111111111111111;
parameter    ap_const_lv20_80000 = 20'b10000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
reg   [30:0] seed_V = 31'b100100000;
reg   [0:0] tmp_5_reg_502;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_46;
wire   [4:0] tmp_6_fu_103_p1;
reg   [4:0] tmp_6_reg_507;
reg   [31:0] tmp_10_reg_512;
reg   [31:0] tmp_4_reg_517;
reg   [0:0] tmp_12_reg_523;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_61;
wire   [19:0] tmp_13_fu_158_p1;
reg   [19:0] tmp_13_reg_528;
wire   [19:0] tmp_16_fu_162_p1;
reg   [19:0] tmp_16_reg_533;
reg   [0:0] isneg_reg_538;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_74;
wire   [24:0] tmp_19_fu_207_p1;
reg   [24:0] tmp_19_reg_544;
reg   [0:0] newsignbit_reg_549;
reg   [6:0] p_Result_s_reg_555;
wire   [0:0] overflow_fu_244_p2;
reg   [0:0] overflow_reg_561;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_89;
wire   [0:0] underflow_fu_266_p2;
reg   [0:0] underflow_reg_567;
reg   [24:0] ret_V_reg_574;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_100;
reg   [0:0] isneg_1_reg_581;
wire   [0:0] tmp_3_fu_337_p2;
reg   [0:0] tmp_3_reg_588;
reg   [16:0] tmp_14_reg_593;
wire   [0:0] newsignbit_1_fu_353_p3;
reg   [0:0] newsignbit_1_reg_598;
wire   [0:0] p_not_i_fu_371_p2;
reg   [0:0] p_not_i_reg_603;
wire   [0:0] newsignbit_0_not_i_fu_377_p2;
reg   [0:0] newsignbit_0_not_i_reg_608;
wire   [0:0] p_not38_i_fu_383_p2;
reg   [0:0] p_not38_i_reg_613;
wire  signed [30:0] p_Val2_4_cast_fu_414_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_122;
wire  signed [30:0] grp_fu_89_p0;
wire   [6:0] grp_fu_89_p1;
wire  signed [37:0] grp_fu_89_p2;
wire   [0:0] tmp_2_fu_127_p2;
wire   [31:0] tmp_11_fu_132_p2;
wire   [31:0] tmp_7_fu_137_p3;
wire   [31:0] tmp_9_fu_144_p3;
wire   [19:0] tmp_17_fu_173_p2;
wire   [31:0] p_and_t_fu_178_p3;
wire   [31:0] p_neg_t_fu_186_p2;
wire   [31:0] p_and_f_fu_166_p3;
wire   [31:0] p_Val2_1_fu_192_p3;
wire   [0:0] p_not_i_i1_fu_229_p2;
wire   [0:0] brmerge_i_i1_fu_234_p2;
wire   [0:0] tmp_1_fu_239_p2;
wire   [0:0] p_not38_i_i1_fu_255_p2;
wire   [0:0] newsignbit_0_not_i_i1_fu_250_p2;
wire   [0:0] brmerge39_i_i1_fu_260_p2;
wire   [0:0] underflow_not_fu_282_p2;
wire   [0:0] brmerge_i_i_i1_fu_278_p2;
wire   [40:0] p_Val2_2_fu_271_p3;
wire   [0:0] brmerge_fu_287_p2;
wire   [40:0] p_Val2_2_mux_fu_292_p3;
wire   [40:0] p_Val2_2_35_fu_300_p3;
wire   [40:0] p_Val2_3_fu_307_p3;
wire   [15:0] tmp_22_fu_333_p1;
wire   [3:0] tmp_fu_361_p4;
wire   [24:0] ret_V_1_fu_389_p2;
wire   [24:0] p_3_fu_394_p3;
wire   [24:0] tmp_s_fu_400_p3;
wire   [29:0] p_Val2_4_fu_406_p3;
wire   [0:0] brmerge_i_fu_431_p2;
wire   [0:0] tmp_8_fu_435_p2;
wire   [0:0] brmerge39_i_fu_446_p2;
wire   [0:0] underflow_1_fu_450_p2;
wire   [0:0] overflow_1_fu_440_p2;
wire   [0:0] underflow_2_not_fu_461_p2;
wire   [0:0] brmerge_i_i2_fu_455_p2;
wire   [19:0] p_Val2_5_fu_424_p3;
wire   [0:0] brmerge4_fu_467_p2;
wire   [19:0] result_V_fu_473_p3;
wire   [19:0] p_Val2_7_fu_481_p3;
wire    grp_fu_89_ce;
reg   [7:0] ap_NS_fsm;


Compult_mul_31s_7ns_38_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 38 ))
Compult_mul_31s_7ns_38_3_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_89_p0 ),
    .din1( grp_fu_89_p1 ),
    .ce( grp_fu_89_ce ),
    .dout( grp_fu_89_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        isneg_1_reg_581 <= p_Val2_3_fu_307_p3[ap_const_lv32_28];
        newsignbit_0_not_i_reg_608 <= newsignbit_0_not_i_fu_377_p2;
        newsignbit_1_reg_598 <= p_Val2_3_fu_307_p3[ap_const_lv32_24];
        p_not38_i_reg_613 <= p_not38_i_fu_383_p2;
        p_not_i_reg_603 <= p_not_i_fu_371_p2;
        ret_V_reg_574 <= {{p_Val2_3_fu_307_p3[ap_const_lv32_28 : ap_const_lv32_10]}};
        tmp_14_reg_593 <= {{p_Val2_3_fu_307_p3[ap_const_lv32_24 : ap_const_lv32_14]}};
        tmp_3_reg_588 <= tmp_3_fu_337_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        isneg_reg_538 <= p_Val2_1_fu_192_p3[ap_const_lv32_1F];
        newsignbit_reg_549 <= p_Val2_1_fu_192_p3[ap_const_lv32_18];
        p_Result_s_reg_555 <= {{p_Val2_1_fu_192_p3[ap_const_lv32_1F : ap_const_lv32_19]}};
        tmp_19_reg_544 <= tmp_19_fu_207_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        overflow_reg_561 <= overflow_fu_244_p2;
        underflow_reg_567 <= underflow_fu_266_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        seed_V[5] <= p_Val2_4_cast_fu_414_p1[5];
seed_V[6] <= p_Val2_4_cast_fu_414_p1[6];
seed_V[7] <= p_Val2_4_cast_fu_414_p1[7];
seed_V[8] <= p_Val2_4_cast_fu_414_p1[8];
seed_V[9] <= p_Val2_4_cast_fu_414_p1[9];
seed_V[10] <= p_Val2_4_cast_fu_414_p1[10];
seed_V[11] <= p_Val2_4_cast_fu_414_p1[11];
seed_V[12] <= p_Val2_4_cast_fu_414_p1[12];
seed_V[13] <= p_Val2_4_cast_fu_414_p1[13];
seed_V[14] <= p_Val2_4_cast_fu_414_p1[14];
seed_V[15] <= p_Val2_4_cast_fu_414_p1[15];
seed_V[16] <= p_Val2_4_cast_fu_414_p1[16];
seed_V[17] <= p_Val2_4_cast_fu_414_p1[17];
seed_V[18] <= p_Val2_4_cast_fu_414_p1[18];
seed_V[19] <= p_Val2_4_cast_fu_414_p1[19];
seed_V[20] <= p_Val2_4_cast_fu_414_p1[20];
seed_V[21] <= p_Val2_4_cast_fu_414_p1[21];
seed_V[22] <= p_Val2_4_cast_fu_414_p1[22];
seed_V[23] <= p_Val2_4_cast_fu_414_p1[23];
seed_V[24] <= p_Val2_4_cast_fu_414_p1[24];
seed_V[25] <= p_Val2_4_cast_fu_414_p1[25];
seed_V[26] <= p_Val2_4_cast_fu_414_p1[26];
seed_V[27] <= p_Val2_4_cast_fu_414_p1[27];
seed_V[28] <= p_Val2_4_cast_fu_414_p1[28];
seed_V[29] <= p_Val2_4_cast_fu_414_p1[29];
seed_V[30] <= p_Val2_4_cast_fu_414_p1[30];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_10_reg_512 <= {{grp_fu_89_p2[ap_const_lv32_24 : ap_const_lv32_5]}};
        tmp_4_reg_517 <= {{grp_fu_89_p2[ap_const_lv32_24 : ap_const_lv32_5]}};
        tmp_5_reg_502 <= grp_fu_89_p2[ap_const_lv32_25];
        tmp_6_reg_507 <= tmp_6_fu_103_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_12_reg_523 <= tmp_9_fu_144_p3[ap_const_lv32_1F];
        tmp_13_reg_528 <= tmp_13_fu_158_p1;
        tmp_16_reg_533 <= tmp_16_fu_162_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_46)
begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_61)
begin
    if (ap_sig_bdd_61) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_89)
begin
    if (ap_sig_bdd_89) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_100)
begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_122)
begin
    if (ap_sig_bdd_122) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = ((brmerge4_fu_467_p2)? result_V_fu_473_p3: p_Val2_7_fu_481_p3);

/// ap_sig_bdd_100 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_122 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_122 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_61 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_61 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_89 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_89 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end
assign brmerge39_i_fu_446_p2 = (p_not38_i_reg_613 | newsignbit_0_not_i_reg_608);
assign brmerge39_i_i1_fu_260_p2 = (p_not38_i_i1_fu_255_p2 | newsignbit_0_not_i_i1_fu_250_p2);
assign brmerge4_fu_467_p2 = (overflow_1_fu_440_p2 | underflow_2_not_fu_461_p2);
assign brmerge_fu_287_p2 = (overflow_reg_561 | underflow_not_fu_282_p2);
assign brmerge_i_fu_431_p2 = (newsignbit_1_reg_598 | p_not_i_reg_603);
assign brmerge_i_i1_fu_234_p2 = (newsignbit_reg_549 | p_not_i_i1_fu_229_p2);
assign brmerge_i_i2_fu_455_p2 = (underflow_1_fu_450_p2 | overflow_1_fu_440_p2);
assign brmerge_i_i_i1_fu_278_p2 = (underflow_reg_567 | overflow_reg_561);
assign grp_fu_89_ce = ap_const_logic_1;
assign grp_fu_89_p0 = seed_V;
assign grp_fu_89_p1 = ap_const_lv38_2D;
assign newsignbit_0_not_i_fu_377_p2 = (newsignbit_1_fu_353_p3 ^ ap_const_lv1_1);
assign newsignbit_0_not_i_i1_fu_250_p2 = (newsignbit_reg_549 ^ ap_const_lv1_1);
assign newsignbit_1_fu_353_p3 = p_Val2_3_fu_307_p3[ap_const_lv32_24];
assign overflow_1_fu_440_p2 = (brmerge_i_fu_431_p2 & tmp_8_fu_435_p2);
assign overflow_fu_244_p2 = (brmerge_i_i1_fu_234_p2 & tmp_1_fu_239_p2);
assign p_3_fu_394_p3 = ((tmp_3_reg_588)? ret_V_reg_574: ret_V_1_fu_389_p2);
assign p_Val2_1_fu_192_p3 = ((tmp_12_reg_523)? p_neg_t_fu_186_p2: p_and_f_fu_166_p3);
assign p_Val2_2_35_fu_300_p3 = ((underflow_reg_567)? ap_const_lv41_10000000000: p_Val2_2_fu_271_p3);
assign p_Val2_2_fu_271_p3 = {{tmp_19_reg_544}, {ap_const_lv16_0}};
assign p_Val2_2_mux_fu_292_p3 = ((brmerge_i_i_i1_fu_278_p2)? ap_const_lv41_FFFFFFFFFF: p_Val2_2_fu_271_p3);
assign p_Val2_3_fu_307_p3 = ((brmerge_fu_287_p2)? p_Val2_2_mux_fu_292_p3: p_Val2_2_35_fu_300_p3);
assign p_Val2_4_cast_fu_414_p1 = $signed(p_Val2_4_fu_406_p3);
assign p_Val2_4_fu_406_p3 = {{tmp_s_fu_400_p3}, {ap_const_lv5_0}};
assign p_Val2_5_fu_424_p3 = {{tmp_14_reg_593}, {ap_const_lv3_0}};
assign p_Val2_7_fu_481_p3 = ((underflow_1_fu_450_p2)? ap_const_lv20_80000: p_Val2_5_fu_424_p3);
assign p_and_f_fu_166_p3 = {{ap_const_lv12_0}, {tmp_13_reg_528}};
assign p_and_t_fu_178_p3 = {{ap_const_lv12_0}, {tmp_17_fu_173_p2}};
assign p_neg_t_fu_186_p2 = (ap_const_lv32_0 - p_and_t_fu_178_p3);
assign p_not38_i_fu_383_p2 = (tmp_fu_361_p4 != ap_const_lv4_F? 1'b1: 1'b0);
assign p_not38_i_i1_fu_255_p2 = (p_Result_s_reg_555 != ap_const_lv7_7F? 1'b1: 1'b0);
assign p_not_i_fu_371_p2 = (tmp_fu_361_p4 != ap_const_lv4_0? 1'b1: 1'b0);
assign p_not_i_i1_fu_229_p2 = (p_Result_s_reg_555 != ap_const_lv7_0? 1'b1: 1'b0);
assign result_V_fu_473_p3 = ((brmerge_i_i2_fu_455_p2)? ap_const_lv20_7FFFF: p_Val2_5_fu_424_p3);
assign ret_V_1_fu_389_p2 = (ret_V_reg_574 + ap_const_lv25_1);
assign tmp_11_fu_132_p2 = (tmp_10_reg_512 + ap_const_lv32_1);
assign tmp_13_fu_158_p1 = tmp_9_fu_144_p3[19:0];
assign tmp_16_fu_162_p1 = tmp_9_fu_144_p3[19:0];
assign tmp_17_fu_173_p2 = (ap_const_lv20_0 - tmp_16_reg_533);
assign tmp_19_fu_207_p1 = p_Val2_1_fu_192_p3[24:0];
assign tmp_1_fu_239_p2 = (isneg_reg_538 ^ ap_const_lv1_1);
assign tmp_22_fu_333_p1 = p_Val2_3_fu_307_p3[15:0];
assign tmp_2_fu_127_p2 = (tmp_6_reg_507 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_3_fu_337_p2 = (tmp_22_fu_333_p1 == ap_const_lv16_0? 1'b1: 1'b0);
assign tmp_6_fu_103_p1 = grp_fu_89_p2[4:0];
assign tmp_7_fu_137_p3 = ((tmp_2_fu_127_p2)? tmp_4_reg_517: tmp_11_fu_132_p2);
assign tmp_8_fu_435_p2 = (isneg_1_reg_581 ^ ap_const_lv1_1);
assign tmp_9_fu_144_p3 = ((tmp_5_reg_502)? tmp_7_fu_137_p3: tmp_4_reg_517);
assign tmp_fu_361_p4 = {{p_Val2_3_fu_307_p3[ap_const_lv32_28 : ap_const_lv32_25]}};
assign tmp_s_fu_400_p3 = ((isneg_1_reg_581)? p_3_fu_394_p3: ret_V_reg_574);
assign underflow_1_fu_450_p2 = (brmerge39_i_fu_446_p2 & isneg_1_reg_581);
assign underflow_2_not_fu_461_p2 = (underflow_1_fu_450_p2 ^ ap_const_lv1_1);
assign underflow_fu_266_p2 = (brmerge39_i_i1_fu_260_p2 & isneg_reg_538);
assign underflow_not_fu_282_p2 = (underflow_reg_567 ^ ap_const_lv1_1);
always @ (posedge ap_clk)
begin
    seed_V[4:0] <= 5'b00000;
end



endmodule //Compult_randac

