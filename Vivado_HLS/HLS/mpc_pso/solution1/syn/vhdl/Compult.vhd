-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Compult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_in_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ref_in_V : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of Compult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Compult,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.877500,HLS_SYN_LAT=149819,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=80,HLS_SYN_FF=7709,HLS_SYN_LUT=12361}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv36_73333 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001110011001100110011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv41_1F4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000111110100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv30_1FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "011111111111111111111111111111";
    constant ap_const_lv30_20000000 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv55_1D4C000 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001110101001100000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal x1_1_V : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal x2_2_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal u_V : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    signal p_Val2_6_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal qbit_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_208_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_reg_1166 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal tmp_15_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_1186 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal p_Val2_11_fu_274_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_11_reg_1191 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal p_Val2_12_fu_293_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_12_reg_1196 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_fu_305_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_reg_1201 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal signbit_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal qbit_2_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1233 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_reg_1238 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_9_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal qbit_1_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_402_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_reg_1254 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_31_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_5_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_5_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_reg_1274 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_i_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_i_reg_1279 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal p_Val2_15_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_571_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_18_reg_1296 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal overflow_2_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_reg_1308 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_646_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_1315 : STD_LOGIC_VECTOR (15 downto 0);
    signal dx1_V_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx1_V_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal dx2_V_fu_684_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal dx2_V_reg_1325 : STD_LOGIC_VECTOR (29 downto 0);
    signal this_assign_s_fu_698_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal this_assign_s_reg_1336 : STD_LOGIC_VECTOR (27 downto 0);
    signal isneg_2_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal grp_Compult_mpc_pso_fu_161_ap_done : STD_LOGIC;
    signal p_Val2_23_fu_735_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_23_reg_1348 : STD_LOGIC_VECTOR (29 downto 0);
    signal newsignbit_3_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_785_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_reg_1361 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal signbit_1_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal p_Val2_25_reg_1378 : STD_LOGIC_VECTOR (15 downto 0);
    signal qbit_3_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_834_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_47_reg_1388 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_48_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1408 : STD_LOGIC_VECTOR (1 downto 0);
    signal qb_assign_7_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_7_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_256 : BOOLEAN;
    signal p_Val2_26_fu_890_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_26_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal newsignbit_4_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_4_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_924_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_942_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_282 : BOOLEAN;
    signal brmerge_i_i6_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i6_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_17_not_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_17_not_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_3_reg_1462 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal tmp_53_fu_1041_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_reg_1468 : STD_LOGIC_VECTOR (2 downto 0);
    signal brmerge_i8_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i8_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_reg_1478 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Compult_mpc_pso_fu_161_ap_start : STD_LOGIC;
    signal grp_Compult_mpc_pso_fu_161_ap_idle : STD_LOGIC;
    signal grp_Compult_mpc_pso_fu_161_ap_ready : STD_LOGIC;
    signal grp_Compult_mpc_pso_fu_161_dx1_in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Compult_mpc_pso_fu_161_dx2_in_V : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_Compult_mpc_pso_fu_161_y_in_V : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_Compult_mpc_pso_fu_161_u_in_V : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_Compult_mpc_pso_fu_161_ref_in_V : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_Compult_mpc_pso_fu_161_ap_return : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal p_Val2_s_fu_184_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_184_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_281_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_i_cast_36_fu_289_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_8_fu_378_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_378_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_not_i_i_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i2_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_97_mux_i_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i4_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_fu_546_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_36_i5_fu_553_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_17_fu_557_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_21_i_fu_583_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal newsignbit_2_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i5_i_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i6_i_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_i6_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp8_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_16_not_i_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_i_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_i_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_101_mux_i_fu_671_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_3_i_fu_678_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_21_fu_706_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_714_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_717_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_22_fu_721_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_115_mux_fu_771_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_s_37_fu_778_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_802_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_2_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i3_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_887_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i7_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_demorgan_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_3_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_118_mux_fu_1014_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_1020_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_out_V_fu_1026_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_1053_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal newsignbit_5_fu_1045_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i6_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_774 : BOOLEAN;
    signal tmp_12_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_5_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_4_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_18_not_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i7_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_28_fu_1093_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal brmerge7_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_120_mux_fu_1132_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_5_fu_1140_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_316_ce : STD_LOGIC;
    signal grp_fu_802_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_8_fu_378_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_fu_184_p00 : STD_LOGIC_VECTOR (35 downto 0);

    component Compult_mpc_pso IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dx1_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
        dx2_in_V : IN STD_LOGIC_VECTOR (29 downto 0);
        y_in_V : IN STD_LOGIC_VECTOR (27 downto 0);
        u_in_V : IN STD_LOGIC_VECTOR (29 downto 0);
        ref_in_V : IN STD_LOGIC_VECTOR (27 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component Compult_mul_31s_10ns_41_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component Compult_mul_30s_26ns_55_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;



begin
    grp_Compult_mpc_pso_fu_161 : component Compult_mpc_pso
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Compult_mpc_pso_fu_161_ap_start,
        ap_done => grp_Compult_mpc_pso_fu_161_ap_done,
        ap_idle => grp_Compult_mpc_pso_fu_161_ap_idle,
        ap_ready => grp_Compult_mpc_pso_fu_161_ap_ready,
        dx1_in_V => grp_Compult_mpc_pso_fu_161_dx1_in_V,
        dx2_in_V => grp_Compult_mpc_pso_fu_161_dx2_in_V,
        y_in_V => grp_Compult_mpc_pso_fu_161_y_in_V,
        u_in_V => grp_Compult_mpc_pso_fu_161_u_in_V,
        ref_in_V => grp_Compult_mpc_pso_fu_161_ref_in_V,
        ap_return => grp_Compult_mpc_pso_fu_161_ap_return);

    Compult_mul_31s_10ns_41_3_U59 : component Compult_mul_31s_10ns_41_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 10,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => grp_fu_316_ce,
        dout => grp_fu_316_p2);

    Compult_mul_30s_26ns_55_6_U60 : component Compult_mul_30s_26ns_55_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 30,
        din1_WIDTH => 26,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_802_p0,
        din1 => grp_fu_802_p1,
        ce => grp_fu_802_ce,
        dout => grp_fu_802_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg assign process. --
    grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                    grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Compult_mpc_pso_fu_161_ap_ready)) then 
                    grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                brmerge39_i_reg_1478 <= brmerge39_i_fu_1087_p2;
                brmerge_i8_reg_1473 <= brmerge_i8_fu_1069_p2;
                isneg_3_reg_1462 <= u_out_V_fu_1026_p3(15 downto 15);
                tmp_53_reg_1468 <= tmp_53_fu_1041_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                brmerge40_demorgan_i_i_reg_1279 <= brmerge40_demorgan_i_i_fu_441_p2;
                brmerge_i_i2_reg_1274 <= brmerge_i_i2_fu_436_p2;
                p_Val2_9_reg_1244 <= p_Val2_8_fu_378_p2(34 downto 19);
                qb_assign_5_reg_1269 <= qb_assign_5_fu_422_p2;
                qbit_1_reg_1249 <= p_Val2_8_fu_378_p2(18 downto 18);
                tmp_30_reg_1254 <= tmp_30_fu_402_p1;
                tmp_31_reg_1259 <= p_Val2_8_fu_378_p2(34 downto 34);
                tmp_32_reg_1264 <= p_Val2_8_fu_378_p2(19 downto 19);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                brmerge_i_i6_reg_1452 <= brmerge_i_i6_fu_997_p2;
                underflow_17_not_reg_1457 <= underflow_17_not_fu_1009_p2;
                underflow_4_reg_1447 <= underflow_4_fu_992_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                deleted_ones_reg_1436 <= deleted_ones_fu_942_p3;
                deleted_zeros_reg_1431 <= deleted_zeros_fu_924_p3;
                newsignbit_4_reg_1425 <= p_Val2_26_fu_890_p2(15 downto 15);
                p_38_i_reg_1441 <= p_38_i_fu_950_p2;
                p_Val2_26_reg_1419 <= p_Val2_26_fu_890_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                dx1_V_reg_1320(14) <= dx1_V_fu_653_p1(14);
    dx1_V_reg_1320(15) <= dx1_V_fu_653_p1(15);
    dx1_V_reg_1320(16) <= dx1_V_fu_653_p1(16);
    dx1_V_reg_1320(17) <= dx1_V_fu_653_p1(17);
    dx1_V_reg_1320(18) <= dx1_V_fu_653_p1(18);
    dx1_V_reg_1320(19) <= dx1_V_fu_653_p1(19);
    dx1_V_reg_1320(20) <= dx1_V_fu_653_p1(20);
    dx1_V_reg_1320(21) <= dx1_V_fu_653_p1(21);
    dx1_V_reg_1320(22) <= dx1_V_fu_653_p1(22);
    dx1_V_reg_1320(23) <= dx1_V_fu_653_p1(23);
    dx1_V_reg_1320(24) <= dx1_V_fu_653_p1(24);
    dx1_V_reg_1320(25) <= dx1_V_fu_653_p1(25);
    dx1_V_reg_1320(26) <= dx1_V_fu_653_p1(26);
    dx1_V_reg_1320(27) <= dx1_V_fu_653_p1(27);
    dx1_V_reg_1320(28) <= dx1_V_fu_653_p1(28);
    dx1_V_reg_1320(29) <= dx1_V_fu_653_p1(29);
    dx1_V_reg_1320(30) <= dx1_V_fu_653_p1(30);
    dx1_V_reg_1320(31) <= dx1_V_fu_653_p1(31);
                dx2_V_reg_1325 <= dx2_V_fu_684_p3;
                this_assign_s_reg_1336(12) <= this_assign_s_fu_698_p3(12);
    this_assign_s_reg_1336(13) <= this_assign_s_fu_698_p3(13);
    this_assign_s_reg_1336(14) <= this_assign_s_fu_698_p3(14);
    this_assign_s_reg_1336(15) <= this_assign_s_fu_698_p3(15);
    this_assign_s_reg_1336(16) <= this_assign_s_fu_698_p3(16);
    this_assign_s_reg_1336(17) <= this_assign_s_fu_698_p3(17);
    this_assign_s_reg_1336(18) <= this_assign_s_fu_698_p3(18);
    this_assign_s_reg_1336(19) <= this_assign_s_fu_698_p3(19);
    this_assign_s_reg_1336(20) <= this_assign_s_fu_698_p3(20);
    this_assign_s_reg_1336(21) <= this_assign_s_fu_698_p3(21);
    this_assign_s_reg_1336(22) <= this_assign_s_fu_698_p3(22);
    this_assign_s_reg_1336(23) <= this_assign_s_fu_698_p3(23);
    this_assign_s_reg_1336(24) <= this_assign_s_fu_698_p3(24);
    this_assign_s_reg_1336(25) <= this_assign_s_fu_698_p3(25);
    this_assign_s_reg_1336(26) <= this_assign_s_fu_698_p3(26);
    this_assign_s_reg_1336(27) <= this_assign_s_fu_698_p3(27);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_logic_0 = grp_Compult_mpc_pso_fu_161_ap_done)))) then
                isneg_2_reg_1341 <= p_Val2_22_fu_721_p2(30 downto 30);
                newsignbit_3_reg_1354 <= p_Val2_22_fu_721_p2(29 downto 29);
                p_Val2_23_reg_1348 <= p_Val2_23_fu_735_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                newsignbit_reg_1222 <= grp_fu_316_p2(33 downto 33);
                qbit_2_reg_1217 <= grp_fu_316_p2(1 downto 1);
                signbit_reg_1211 <= grp_fu_316_p2(40 downto 40);
                tmp_37_reg_1228 <= grp_fu_316_p2(2 downto 2);
                tmp_38_reg_1238 <= grp_fu_316_p2(40 downto 34);
                tmp_s_reg_1233 <= grp_fu_316_p2(33 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                overflow_2_reg_1302 <= overflow_2_fu_611_p2;
                p_Val2_18_reg_1296 <= p_Val2_18_fu_571_p1;
                tmp_17_reg_1315 <= tmp_17_fu_646_p3;
                underflow_2_reg_1308 <= underflow_2_fu_635_p2;
                x2_2_V <= p_Val2_15_reg_1290;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                p_Val2_11_reg_1191(12) <= p_Val2_11_fu_274_p3(12);
    p_Val2_11_reg_1191(13) <= p_Val2_11_fu_274_p3(13);
    p_Val2_11_reg_1191(14) <= p_Val2_11_fu_274_p3(14);
    p_Val2_11_reg_1191(15) <= p_Val2_11_fu_274_p3(15);
    p_Val2_11_reg_1191(16) <= p_Val2_11_fu_274_p3(16);
    p_Val2_11_reg_1191(17) <= p_Val2_11_fu_274_p3(17);
    p_Val2_11_reg_1191(18) <= p_Val2_11_fu_274_p3(18);
    p_Val2_11_reg_1191(19) <= p_Val2_11_fu_274_p3(19);
    p_Val2_11_reg_1191(20) <= p_Val2_11_fu_274_p3(20);
    p_Val2_11_reg_1191(21) <= p_Val2_11_fu_274_p3(21);
    p_Val2_11_reg_1191(22) <= p_Val2_11_fu_274_p3(22);
    p_Val2_11_reg_1191(23) <= p_Val2_11_fu_274_p3(23);
    p_Val2_11_reg_1191(24) <= p_Val2_11_fu_274_p3(24);
    p_Val2_11_reg_1191(25) <= p_Val2_11_fu_274_p3(25);
    p_Val2_11_reg_1191(26) <= p_Val2_11_fu_274_p3(26);
    p_Val2_11_reg_1191(27) <= p_Val2_11_fu_274_p3(27);
                p_Val2_12_reg_1196(12) <= p_Val2_12_fu_293_p2(12);
    p_Val2_12_reg_1196(13) <= p_Val2_12_fu_293_p2(13);
    p_Val2_12_reg_1196(14) <= p_Val2_12_fu_293_p2(14);
    p_Val2_12_reg_1196(15) <= p_Val2_12_fu_293_p2(15);
    p_Val2_12_reg_1196(16) <= p_Val2_12_fu_293_p2(16);
    p_Val2_12_reg_1196(17) <= p_Val2_12_fu_293_p2(17);
    p_Val2_12_reg_1196(18) <= p_Val2_12_fu_293_p2(18);
    p_Val2_12_reg_1196(19) <= p_Val2_12_fu_293_p2(19);
    p_Val2_12_reg_1196(20) <= p_Val2_12_fu_293_p2(20);
    p_Val2_12_reg_1196(21) <= p_Val2_12_fu_293_p2(21);
    p_Val2_12_reg_1196(22) <= p_Val2_12_fu_293_p2(22);
    p_Val2_12_reg_1196(23) <= p_Val2_12_fu_293_p2(23);
    p_Val2_12_reg_1196(24) <= p_Val2_12_fu_293_p2(24);
    p_Val2_12_reg_1196(25) <= p_Val2_12_fu_293_p2(25);
    p_Val2_12_reg_1196(26) <= p_Val2_12_fu_293_p2(26);
    p_Val2_12_reg_1196(27) <= p_Val2_12_fu_293_p2(27);
    p_Val2_12_reg_1196(28) <= p_Val2_12_fu_293_p2(28);
                x1_1_V(12) <= p_Val2_11_fu_274_p3(12);
    x1_1_V(13) <= p_Val2_11_fu_274_p3(13);
    x1_1_V(14) <= p_Val2_11_fu_274_p3(14);
    x1_1_V(15) <= p_Val2_11_fu_274_p3(15);
    x1_1_V(16) <= p_Val2_11_fu_274_p3(16);
    x1_1_V(17) <= p_Val2_11_fu_274_p3(17);
    x1_1_V(18) <= p_Val2_11_fu_274_p3(18);
    x1_1_V(19) <= p_Val2_11_fu_274_p3(19);
    x1_1_V(20) <= p_Val2_11_fu_274_p3(20);
    x1_1_V(21) <= p_Val2_11_fu_274_p3(21);
    x1_1_V(22) <= p_Val2_11_fu_274_p3(22);
    x1_1_V(23) <= p_Val2_11_fu_274_p3(23);
    x1_1_V(24) <= p_Val2_11_fu_274_p3(24);
    x1_1_V(25) <= p_Val2_11_fu_274_p3(25);
    x1_1_V(26) <= p_Val2_11_fu_274_p3(26);
    x1_1_V(27) <= p_Val2_11_fu_274_p3(27);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                p_Val2_15_reg_1290 <= p_Val2_15_fu_514_p3;
                qb_assign_3_reg_1285 <= qb_assign_3_fu_456_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                p_Val2_25_reg_1378 <= grp_fu_802_p2(52 downto 37);
                qbit_3_reg_1383 <= grp_fu_802_p2(36 downto 36);
                signbit_1_reg_1371 <= grp_fu_802_p2(54 downto 54);
                tmp_47_reg_1388 <= tmp_47_fu_834_p1;
                tmp_48_reg_1393 <= grp_fu_802_p2(52 downto 52);
                tmp_49_reg_1398 <= grp_fu_802_p2(37 downto 37);
                tmp_51_reg_1403 <= grp_fu_802_p2(53 downto 53);
                tmp_8_reg_1408 <= grp_fu_802_p2(54 downto 53);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                p_Val2_6_reg_1156 <= p_Val2_s_fu_184_p2(34 downto 19);
                qbit_reg_1161 <= p_Val2_s_fu_184_p2(18 downto 18);
                tmp_25_reg_1166 <= tmp_25_fu_208_p1;
                tmp_26_reg_1171 <= p_Val2_s_fu_184_p2(34 downto 34);
                tmp_27_reg_1176 <= p_Val2_s_fu_184_p2(19 downto 19);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                qb_assign_1_reg_1181 <= qb_assign_1_fu_238_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                qb_assign_7_reg_1414 <= qb_assign_7_fu_882_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_15_reg_1186 <= tmp_15_fu_267_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_16_reg_1201(14) <= tmp_16_fu_305_p3(14);
    tmp_16_reg_1201(15) <= tmp_16_fu_305_p3(15);
    tmp_16_reg_1201(16) <= tmp_16_fu_305_p3(16);
    tmp_16_reg_1201(17) <= tmp_16_fu_305_p3(17);
    tmp_16_reg_1201(18) <= tmp_16_fu_305_p3(18);
    tmp_16_reg_1201(19) <= tmp_16_fu_305_p3(19);
    tmp_16_reg_1201(20) <= tmp_16_fu_305_p3(20);
    tmp_16_reg_1201(21) <= tmp_16_fu_305_p3(21);
    tmp_16_reg_1201(22) <= tmp_16_fu_305_p3(22);
    tmp_16_reg_1201(23) <= tmp_16_fu_305_p3(23);
    tmp_16_reg_1201(24) <= tmp_16_fu_305_p3(24);
    tmp_16_reg_1201(25) <= tmp_16_fu_305_p3(25);
    tmp_16_reg_1201(26) <= tmp_16_fu_305_p3(26);
    tmp_16_reg_1201(27) <= tmp_16_fu_305_p3(27);
    tmp_16_reg_1201(28) <= tmp_16_fu_305_p3(28);
    tmp_16_reg_1201(29) <= tmp_16_fu_305_p3(29);
    tmp_16_reg_1201(30) <= tmp_16_fu_305_p3(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_7_reg_1361 <= tmp_7_fu_785_p3;
                u_V <= tmp_7_fu_785_p3;
            end if;
        end if;
    end process;
    x1_1_V(11 downto 0) <= "000000000000";
    p_Val2_11_reg_1191(11 downto 0) <= "000000000000";
    p_Val2_12_reg_1196(11 downto 0) <= "000000000000";
    tmp_16_reg_1201(13 downto 0) <= "00000000000000";
    dx1_V_reg_1320(13 downto 0) <= "00000000000000";
    this_assign_s_reg_1336(11 downto 0) <= "000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_Compult_mpc_pso_fu_161_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_logic_0 = grp_Compult_mpc_pso_fu_161_ap_done))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_3_fu_426_p2 <= "1" when (tmp_38_reg_1238 = ap_const_lv7_7F) else "0";
    Range1_all_ones_fu_914_p2 <= "1" when (tmp_8_reg_1408 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_919_p2 <= "1" when (tmp_8_reg_1408 = ap_const_lv2_0) else "0";

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        p_Val2_120_mux_fu_1132_p3 when (brmerge7_fu_1126_p2(0) = '1') else 
        p_Val2_5_fu_1140_p3;

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_256 assign process. --
    ap_sig_bdd_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_256 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_282 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_774 assign process. --
    ap_sig_bdd_774_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_774 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_256)
    begin
        if (ap_sig_bdd_256) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_282)
    begin
        if (ap_sig_bdd_282) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_774)
    begin
        if (ap_sig_bdd_774) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge2_i_fu_666_p2 <= (overflow_2_reg_1302 or underflow_16_not_i_fu_661_p2);
    brmerge39_i_fu_1087_p2 <= (p_not38_i_fu_1081_p2 or newsignbit_0_not_i_fu_1075_p2);
    brmerge39_i_i_fu_629_p2 <= (p_not38_i_i_fu_623_p2 or newsignbit_0_not_i_i_fu_617_p2);
    brmerge40_demorgan_i_fu_977_p2 <= (newsignbit_4_reg_1425 and deleted_ones_reg_1436);
    brmerge40_demorgan_i_i_fu_441_p2 <= (newsignbit_reg_1222 and Range1_all_ones_3_fu_426_p2);
    brmerge7_fu_1126_p2 <= (overflow_4_fu_1105_p2 or underflow_18_not_fu_1120_p2);
    brmerge_fu_766_p2 <= (newsignbit_3_reg_1354 or isneg_not_fu_761_p2);
    brmerge_i6_i_fu_599_p2 <= (newsignbit_2_fu_575_p3 or p_not_i5_i_fu_593_p2);
    brmerge_i7_fu_961_p2 <= (newsignbit_4_reg_1425 or p_not_i_fu_956_p2);
    brmerge_i8_fu_1069_p2 <= (newsignbit_5_fu_1045_p3 or p_not_i6_fu_1063_p2);
    brmerge_i_i2_fu_436_p2 <= (newsignbit_reg_1222 or p_not_i_i_fu_431_p2);
    brmerge_i_i5_i_fu_657_p2 <= (underflow_2_reg_1308 or overflow_2_reg_1302);
    brmerge_i_i6_fu_997_p2 <= (underflow_4_fu_992_p2 or overflow_3_fu_971_p2);
    brmerge_i_i7_fu_1114_p2 <= (underflow_5_fu_1110_p2 or overflow_4_fu_1105_p2);
    brmerge_i_i_fu_757_p2 <= (isneg_2_reg_1341 xor newsignbit_3_reg_1354);
    brmerge_i_i_i3_fu_487_p2 <= (underflow_fu_482_p2 or overflow_fu_472_p2);
    carry_fu_909_p2 <= (tmp_48_reg_1393 and tmp_2_fu_903_p2);
    deleted_ones_fu_942_p3 <= 
        p_41_i_fu_937_p2 when (carry_fu_909_p2(0) = '1') else 
        Range1_all_ones_fu_914_p2;
    deleted_zeros_fu_924_p3 <= 
        Range1_all_ones_fu_914_p2 when (carry_fu_909_p2(0) = '1') else 
        Range1_all_zeros_fu_919_p2;
        dx1_V_fu_653_p1 <= std_logic_vector(resize(signed(tmp_16_reg_1201),32));

    dx2_V_fu_684_p3 <= 
        p_Val2_101_mux_i_fu_671_p3 when (brmerge2_i_fu_666_p2(0) = '1') else 
        p_Val2_3_i_fu_678_p3;
    grp_Compult_mpc_pso_fu_161_ap_start <= grp_Compult_mpc_pso_fu_161_ap_start_ap_start_reg;
    grp_Compult_mpc_pso_fu_161_dx1_in_V <= dx1_V_reg_1320;
    grp_Compult_mpc_pso_fu_161_dx2_in_V <= dx2_V_reg_1325;
    grp_Compult_mpc_pso_fu_161_ref_in_V <= this_assign_s_reg_1336;
    grp_Compult_mpc_pso_fu_161_u_in_V <= u_V;
    grp_Compult_mpc_pso_fu_161_y_in_V <= p_Val2_11_reg_1191;
    grp_fu_316_ce <= ap_const_logic_1;
    grp_fu_316_p0 <= tmp_16_fu_305_p3;
    grp_fu_316_p1 <= ap_const_lv41_1F4(10 - 1 downto 0);
    grp_fu_802_ce <= ap_const_logic_1;
    grp_fu_802_p0 <= tmp_7_reg_1361;
    grp_fu_802_p1 <= ap_const_lv55_1D4C000(26 - 1 downto 0);
    isneg_fu_563_p3 <= p_Val2_17_fu_557_p2(32 downto 32);
    isneg_not_fu_761_p2 <= (isneg_2_reg_1341 xor ap_const_lv1_1);
    newsignbit_0_not_i_fu_1075_p2 <= (newsignbit_5_fu_1045_p3 xor ap_const_lv1_1);
    newsignbit_0_not_i_i_fu_617_p2 <= (newsignbit_2_fu_575_p3 xor ap_const_lv1_1);
    newsignbit_2_fu_575_p3 <= p_Val2_17_fu_557_p2(29 downto 29);
    newsignbit_4_fu_895_p3 <= p_Val2_26_fu_890_p2(15 downto 15);
    newsignbit_5_fu_1045_p3 <= u_out_V_fu_1026_p3(2 downto 2);
    overflow_2_fu_611_p2 <= (brmerge_i6_i_fu_599_p2 and tmp_37_i6_fu_605_p2);
    overflow_3_fu_971_p2 <= (brmerge_i7_fu_961_p2 and tmp_11_fu_966_p2);
    overflow_4_fu_1105_p2 <= (brmerge_i8_reg_1473 and tmp_12_fu_1100_p2);
    overflow_fu_472_p2 <= (brmerge_i_i2_reg_1274 and tmp_34_i_fu_467_p2);
    p_38_i_fu_950_p2 <= (carry_fu_909_p2 and Range1_all_ones_fu_914_p2);
    p_41_i_fu_937_p2 <= (signbit_1_reg_1371 and tmp_10_fu_932_p2);
    p_Result_21_i_fu_583_p4 <= p_Val2_17_fu_557_p2(32 downto 30);
    p_Result_s_fu_1053_p4 <= u_out_V_fu_1026_p3(15 downto 3);
    p_Val2_101_mux_i_fu_671_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i5_i_fu_657_p2(0) = '1') else 
        p_Val2_18_reg_1296;
    p_Val2_10_fu_525_p2 <= std_logic_vector(unsigned(p_Val2_9_reg_1244) + unsigned(tmp_3_fu_522_p1));
    p_Val2_115_mux_fu_771_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i_fu_757_p2(0) = '1') else 
        p_Val2_23_reg_1348;
    p_Val2_118_mux_fu_1014_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i6_reg_1452(0) = '1') else 
        p_Val2_26_reg_1419;
    p_Val2_11_fu_274_p3 <= (tmp_15_reg_1186 & ap_const_lv12_0);
    p_Val2_120_mux_fu_1132_p3 <= 
        ap_const_lv30_1FFFFFFF when (brmerge_i_i7_fu_1114_p2(0) = '1') else 
        p_Val2_28_fu_1093_p3;
    p_Val2_12_fu_293_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_281_p1) - unsigned(tmp_i_cast_36_fu_289_p1));
    p_Val2_14_fu_461_p3 <= (tmp_s_reg_1233 & qb_assign_5_reg_1269);
    p_Val2_15_fu_514_p3 <= 
        p_Val2_97_mux_i_fu_498_p3 when (tmp7_fu_493_p2(0) = '1') else 
        p_Val2_i4_fu_506_p3;
    p_Val2_17_fu_557_p2 <= std_logic_vector(signed(tmp_35_i_fu_546_p1) - signed(tmp_36_i5_fu_553_p1));
    p_Val2_18_fu_571_p1 <= p_Val2_17_fu_557_p2(30 - 1 downto 0);
    p_Val2_21_fu_706_p3 <= (grp_Compult_mpc_pso_fu_161_ap_return & ap_const_lv2_0);
    p_Val2_22_fu_721_p2 <= std_logic_vector(signed(tmp_4_fu_714_p1) + signed(tmp_5_fu_717_p1));
    p_Val2_23_fu_735_p1 <= p_Val2_22_fu_721_p2(30 - 1 downto 0);
    p_Val2_26_fu_890_p2 <= std_logic_vector(unsigned(p_Val2_25_reg_1378) + unsigned(tmp_9_fu_887_p1));
    p_Val2_28_fu_1093_p3 <= (tmp_53_reg_1468 & ap_const_lv27_0);
    p_Val2_3_i_fu_678_p3 <= 
        ap_const_lv30_20000000 when (underflow_2_reg_1308(0) = '1') else 
        p_Val2_18_reg_1296;
    p_Val2_4_fu_1020_p3 <= 
        ap_const_lv16_8000 when (underflow_4_reg_1447(0) = '1') else 
        p_Val2_26_reg_1419;
    p_Val2_5_fu_1140_p3 <= 
        ap_const_lv30_20000000 when (underflow_5_fu_1110_p2(0) = '1') else 
        p_Val2_28_fu_1093_p3;
    p_Val2_7_fu_246_p2 <= std_logic_vector(unsigned(p_Val2_6_reg_1156) + unsigned(tmp_1_fu_243_p1));
    p_Val2_8_fu_378_p0 <= p_Val2_8_fu_378_p00(16 - 1 downto 0);
    p_Val2_8_fu_378_p00 <= std_logic_vector(resize(unsigned(ref_in_V),36));
    p_Val2_8_fu_378_p2 <= std_logic_vector(resize(unsigned(p_Val2_8_fu_378_p0) * unsigned(ap_const_lv36_73333), 36));
    p_Val2_97_mux_i_fu_498_p3 <= 
        ap_const_lv32_7FFFFFFF when (brmerge_i_i_i3_fu_487_p2(0) = '1') else 
        p_Val2_14_fu_461_p3;
    p_Val2_i4_fu_506_p3 <= 
        ap_const_lv32_80000000 when (underflow_fu_482_p2(0) = '1') else 
        p_Val2_14_fu_461_p3;
    p_Val2_s_37_fu_778_p3 <= 
        ap_const_lv30_20000000 when (underflow_3_fu_752_p2(0) = '1') else 
        p_Val2_23_reg_1348;
    p_Val2_s_fu_184_p0 <= p_Val2_s_fu_184_p00(16 - 1 downto 0);
    p_Val2_s_fu_184_p00 <= std_logic_vector(resize(unsigned(y_in_V),36));
    p_Val2_s_fu_184_p2 <= std_logic_vector(resize(unsigned(p_Val2_s_fu_184_p0) * unsigned(ap_const_lv36_73333), 36));
    p_not38_i_fu_1081_p2 <= "0" when (p_Result_s_fu_1053_p4 = ap_const_lv13_1FFF) else "1";
    p_not38_i_i_fu_623_p2 <= "0" when (p_Result_21_i_fu_583_p4 = ap_const_lv3_7) else "1";
    p_not_i5_i_fu_593_p2 <= "0" when (p_Result_21_i_fu_583_p4 = ap_const_lv3_0) else "1";
    p_not_i6_fu_1063_p2 <= "0" when (p_Result_s_fu_1053_p4 = ap_const_lv13_0) else "1";
    p_not_i_fu_956_p2 <= (deleted_zeros_reg_1431 xor ap_const_lv1_1);
    p_not_i_i_fu_431_p2 <= "0" when (tmp_38_reg_1238 = ap_const_lv7_0) else "1";
    phitmp8_fu_538_p3 <= 
        p_Val2_10_fu_525_p2 when (tmp_33_fu_530_p3(0) = '1') else 
        ap_const_lv16_FFFF;
    phitmp_fu_259_p3 <= 
        p_Val2_7_fu_246_p2 when (tmp_28_fu_251_p3(0) = '1') else 
        ap_const_lv16_FFFF;
    qb_assign_1_fu_238_p2 <= (r_i_i_fu_233_p2 and qbit_reg_1161);
    qb_assign_3_fu_456_p2 <= (r_i_i2_fu_451_p2 and qbit_1_reg_1249);
    qb_assign_5_fu_422_p2 <= (tmp_37_reg_1228 and qbit_2_reg_1217);
    qb_assign_7_fu_882_p2 <= (r_i_i3_fu_877_p2 and qbit_3_reg_1383);
    r_1_fu_446_p2 <= "0" when (tmp_30_reg_1254 = ap_const_lv18_0) else "1";
    r_2_fu_872_p2 <= "0" when (tmp_47_reg_1388 = ap_const_lv36_0) else "1";
    r_fu_228_p2 <= "0" when (tmp_25_reg_1166 = ap_const_lv18_0) else "1";
    r_i_i2_fu_451_p2 <= (tmp_32_reg_1264 or r_1_fu_446_p2);
    r_i_i3_fu_877_p2 <= (tmp_49_reg_1398 or r_2_fu_872_p2);
    r_i_i_fu_233_p2 <= (tmp_27_reg_1176 or r_fu_228_p2);
    this_assign_s_fu_698_p3 <= (tmp_17_reg_1315 & ap_const_lv12_0);
    tmp7_fu_493_p2 <= (brmerge40_demorgan_i_i_reg_1279 or tmp_34_i_fu_467_p2);
    tmp8_demorgan_fu_981_p2 <= (p_38_i_reg_1441 or brmerge40_demorgan_i_fu_977_p2);
    tmp8_fu_986_p2 <= (tmp8_demorgan_fu_981_p2 xor ap_const_lv1_1);
    tmp9_fu_1003_p2 <= (brmerge40_demorgan_i_fu_977_p2 or tmp_11_fu_966_p2);
    tmp_10_fu_932_p2 <= (tmp_51_reg_1403 xor ap_const_lv1_1);
    tmp_11_fu_966_p2 <= (signbit_1_reg_1371 xor ap_const_lv1_1);
    tmp_12_fu_1100_p2 <= (isneg_3_reg_1462 xor ap_const_lv1_1);
    tmp_15_fu_267_p3 <= 
        phitmp_fu_259_p3 when (tmp_26_reg_1171(0) = '1') else 
        p_Val2_7_fu_246_p2;
    tmp_16_fu_305_p3 <= (p_Val2_12_reg_1196 & ap_const_lv2_0);
    tmp_17_fu_646_p3 <= 
        phitmp8_fu_538_p3 when (tmp_31_reg_1259(0) = '1') else 
        p_Val2_10_fu_525_p2;
    tmp_1_fu_243_p1 <= std_logic_vector(resize(unsigned(qb_assign_1_reg_1181),16));
    tmp_25_fu_208_p1 <= p_Val2_s_fu_184_p2(18 - 1 downto 0);
    tmp_28_fu_251_p3 <= p_Val2_7_fu_246_p2(15 downto 15);
    tmp_2_fu_903_p2 <= (newsignbit_4_fu_895_p3 xor ap_const_lv1_1);
    tmp_30_fu_402_p1 <= p_Val2_8_fu_378_p2(18 - 1 downto 0);
    tmp_33_fu_530_p3 <= p_Val2_10_fu_525_p2(15 downto 15);
    tmp_34_i_fu_467_p2 <= (signbit_reg_1211 xor ap_const_lv1_1);
        tmp_35_i_fu_546_p1 <= std_logic_vector(resize(signed(p_Val2_15_reg_1290),33));

        tmp_36_i5_fu_553_p1 <= std_logic_vector(resize(signed(x2_2_V),33));

    tmp_37_i6_fu_605_p2 <= (isneg_fu_563_p3 xor ap_const_lv1_1);
    tmp_3_fu_522_p1 <= std_logic_vector(resize(unsigned(qb_assign_3_reg_1285),16));
    tmp_47_fu_834_p1 <= grp_fu_802_p2(36 - 1 downto 0);
        tmp_4_fu_714_p1 <= std_logic_vector(resize(signed(u_V),31));

    tmp_53_fu_1041_p1 <= u_out_V_fu_1026_p3(3 - 1 downto 0);
        tmp_5_fu_717_p1 <= std_logic_vector(resize(signed(p_Val2_21_fu_706_p3),31));

    tmp_6_fu_747_p2 <= (newsignbit_3_reg_1354 xor ap_const_lv1_1);
    tmp_7_fu_785_p3 <= 
        p_Val2_115_mux_fu_771_p3 when (brmerge_fu_766_p2(0) = '1') else 
        p_Val2_s_37_fu_778_p3;
    tmp_9_fu_887_p1 <= std_logic_vector(resize(unsigned(qb_assign_7_reg_1414),16));
    tmp_fu_477_p2 <= (brmerge40_demorgan_i_i_reg_1279 xor ap_const_lv1_1);
    tmp_i_cast_36_fu_289_p1 <= std_logic_vector(resize(unsigned(x1_1_V),29));
    tmp_i_cast_fu_281_p1 <= std_logic_vector(resize(unsigned(p_Val2_11_fu_274_p3),29));
    u_out_V_fu_1026_p3 <= 
        p_Val2_118_mux_fu_1014_p3 when (underflow_17_not_reg_1457(0) = '1') else 
        p_Val2_4_fu_1020_p3;
    underflow_16_not_i_fu_661_p2 <= (underflow_2_reg_1308 xor ap_const_lv1_1);
    underflow_17_not_fu_1009_p2 <= (tmp9_fu_1003_p2 or p_38_i_reg_1441);
    underflow_18_not_fu_1120_p2 <= (underflow_5_fu_1110_p2 xor ap_const_lv1_1);
    underflow_2_fu_635_p2 <= (brmerge39_i_i_fu_629_p2 and isneg_fu_563_p3);
    underflow_3_fu_752_p2 <= (isneg_2_reg_1341 and tmp_6_fu_747_p2);
    underflow_4_fu_992_p2 <= (signbit_1_reg_1371 and tmp8_fu_986_p2);
    underflow_5_fu_1110_p2 <= (brmerge39_i_reg_1478 and isneg_3_reg_1462);
    underflow_fu_482_p2 <= (signbit_reg_1211 and tmp_fu_477_p2);
end behav;
