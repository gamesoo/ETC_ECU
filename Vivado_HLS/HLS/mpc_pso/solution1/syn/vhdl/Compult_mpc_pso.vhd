-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Compult_mpc_pso is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dx1_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    dx2_in_V : IN STD_LOGIC_VECTOR (29 downto 0);
    y_in_V : IN STD_LOGIC_VECTOR (27 downto 0);
    u_in_V : IN STD_LOGIC_VECTOR (29 downto 0);
    ref_in_V : IN STD_LOGIC_VECTOR (27 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
end;


architecture behav of Compult_mpc_pso is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv31_79999A00 : STD_LOGIC_VECTOR (30 downto 0) := "1111001100110011001101000000000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv36_7FFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "011111111111111111111111111111111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv36_800000000 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv28_7FFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "0111111111111111111111111111";
    constant ap_const_lv28_8000000 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_51 : BOOLEAN;
    signal Sx_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Sx_0_ce0 : STD_LOGIC;
    signal Sx_0_q0 : STD_LOGIC_VECTOR (28 downto 0);
    signal Sx_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Sx_1_ce0 : STD_LOGIC;
    signal Sx_1_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal g_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal g_V_ce0 : STD_LOGIC;
    signal g_V_q0 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_s_fu_368_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_s_reg_1149 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_6_fu_374_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_6_reg_1155 : STD_LOGIC_VECTOR (30 downto 0);
    signal OP2_V_cast_fu_380_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal OP2_V_cast_reg_1161 : STD_LOGIC_VECTOR (60 downto 0);
    signal OP2_V_1_cast_fu_384_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal OP2_V_1_cast_reg_1166 : STD_LOGIC_VECTOR (51 downto 0);
    signal i_cast9_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast9_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal i_3_fu_399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1180 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_cast_fu_405_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_7_cast_reg_1190 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_12_cast_cast_fu_408_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_12_cast_cast_reg_1195 : STD_LOGIC_VECTOR (39 downto 0);
    signal Sx_0_load_reg_1200 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_127 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_136 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal Sx_1_load_reg_1215 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Val2_7_reg_1225 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_171 : BOOLEAN;
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Val2_1_reg_1230 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_reg_1235 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal qbit_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal i_1_cast8_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast8_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal i_5_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1268 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_30_fu_534_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_30_reg_1278 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal signbit_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_231 : BOOLEAN;
    signal tmp_60_reg_1289 : STD_LOGIC_VECTOR (28 downto 0);
    signal qbit_4_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i1_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_3_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_246 : BOOLEAN;
    signal p_Val2_33_fu_603_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_33_reg_1309 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_255 : BOOLEAN;
    signal newsignbit_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_not_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_not_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_662_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_1332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_270 : BOOLEAN;
    signal p_addr_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_reg_1337 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond8_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_713_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_1345 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal exitcond_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_6_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_6_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_803_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_V_load_reg_1379 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_307 : BOOLEAN;
    signal Ep_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal Ep_V_load_reg_1384 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_318 : BOOLEAN;
    signal grp_fu_813_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_35_reg_1399 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_329 : BOOLEAN;
    signal qbit_5_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_827_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_71_reg_1409 : STD_LOGIC_VECTOR (20 downto 0);
    signal signbit_2_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_342 : BOOLEAN;
    signal p_Val2_37_reg_1420 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_72_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_5_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_5_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1442 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_959_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_38_reg_1452 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_363 : BOOLEAN;
    signal newsignbit_6_fu_964_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_6_reg_1458 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_983_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_989_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_reg_1469 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_5_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_5_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_380 : BOOLEAN;
    signal underflow_6_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_14_not_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_14_not_reg_1491 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1069_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_393 : BOOLEAN;
    signal G_1_V_1_fu_1125_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_402 : BOOLEAN;
    signal G_1_V_2_fu_1132_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal SxDx_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal SxDx_V_ce0 : STD_LOGIC;
    signal SxDx_V_we0 : STD_LOGIC;
    signal SxDx_V_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal SxDx_V_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal Ep_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ep_V_ce0 : STD_LOGIC;
    signal Ep_V_we0 : STD_LOGIC;
    signal Ep_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_Compult_pso_fu_348_ap_start : STD_LOGIC;
    signal grp_Compult_pso_fu_348_ap_done : STD_LOGIC;
    signal grp_Compult_pso_fu_348_ap_idle : STD_LOGIC;
    signal grp_Compult_pso_fu_348_ap_ready : STD_LOGIC;
    signal grp_Compult_pso_fu_348_G_0_V_read : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_Compult_pso_fu_348_G_1_V_read : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_Compult_pso_fu_348_b_0_V_read : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_Compult_pso_fu_348_b_1_V_read : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_Compult_pso_fu_348_b_2_V_read : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_Compult_pso_fu_348_b_3_V_read : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_Compult_pso_fu_348_ap_return : STD_LOGIC_VECTOR (26 downto 0);
    signal i_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_446 : BOOLEAN;
    signal i_1_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_455 : BOOLEAN;
    signal G_V_0_s_reg_288 : STD_LOGIC_VECTOR (27 downto 0);
    signal G_V_1_s_reg_300 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_2_reg_312 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_2_reg_324 : STD_LOGIC_VECTOR (35 downto 0);
    signal j_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Compult_pso_fu_348_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_480 : BOOLEAN;
    signal p_addr1_cast_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast6_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_364_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_414_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_427_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_5_cast_fu_434_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Val2_8_fu_438_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_56_fu_461_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_i_i_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_cast_cast_fu_488_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_6_cast_cast_fu_491_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_29_fu_494_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_58_fu_522_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_10_cast_cast_fu_530_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_31_fu_539_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_62_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_3_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_fu_597_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_14_fu_600_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal not_carry_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i5_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_668_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_680_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_676_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_688_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast6_cast_fu_703_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr1_fu_719_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_7_fu_745_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal newsignbit_7_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i4_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_813_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_813_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_18_fu_831_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_21_cast_cast_fu_839_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_36_fu_843_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_73_fu_879_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_4_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_i_i_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_906_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_fu_922_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_75_fu_898_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_956_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_20_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_i_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_91_mux_fu_1056_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_2_50_fu_1063_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_66_fu_1076_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal underflow_15_not_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_34_fu_1080_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal brmerge3_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_87_mux_fu_1102_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_51_fu_1110_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal G_0_V_fu_1117_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_414_ce : STD_LOGIC;
    signal grp_fu_422_ce : STD_LOGIC;
    signal grp_fu_813_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_414_p10 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_422_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_813_p10 : STD_LOGIC_VECTOR (64 downto 0);

    component Compult_pso IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        G_0_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
        G_1_V_read : IN STD_LOGIC_VECTOR (27 downto 0);
        b_0_V_read : IN STD_LOGIC_VECTOR (30 downto 0);
        b_1_V_read : IN STD_LOGIC_VECTOR (30 downto 0);
        b_2_V_read : IN STD_LOGIC_VECTOR (30 downto 0);
        b_3_V_read : IN STD_LOGIC_VECTOR (30 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component Compult_mul_32s_29ns_61_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (60 downto 0) );
    end component;


    component Compult_mul_22ns_30s_52_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component Compult_mul_36s_29ns_65_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component Compult_mpc_pso_Sx_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Compult_mpc_pso_Sx_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component Compult_mpc_pso_g_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Compult_mpc_pso_SxDx_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (25 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component Compult_mpc_pso_Ep_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    Sx_0_U : component Compult_mpc_pso_Sx_0
    generic map (
        DataWidth => 29,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Sx_0_address0,
        ce0 => Sx_0_ce0,
        q0 => Sx_0_q0);

    Sx_1_U : component Compult_mpc_pso_Sx_1
    generic map (
        DataWidth => 22,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Sx_1_address0,
        ce0 => Sx_1_ce0,
        q0 => Sx_1_q0);

    g_V_U : component Compult_mpc_pso_g_V
    generic map (
        DataWidth => 29,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_V_address0,
        ce0 => g_V_ce0,
        q0 => g_V_q0);

    SxDx_V_U : component Compult_mpc_pso_SxDx_V
    generic map (
        DataWidth => 26,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SxDx_V_address0,
        ce0 => SxDx_V_ce0,
        we0 => SxDx_V_we0,
        d0 => SxDx_V_d0,
        q0 => SxDx_V_q0);

    Ep_V_U : component Compult_mpc_pso_Ep_V
    generic map (
        DataWidth => 36,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ep_V_address0,
        ce0 => Ep_V_ce0,
        we0 => Ep_V_we0,
        d0 => Ep_V_d0,
        q0 => Ep_V_q0);

    grp_Compult_pso_fu_348 : component Compult_pso
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Compult_pso_fu_348_ap_start,
        ap_done => grp_Compult_pso_fu_348_ap_done,
        ap_idle => grp_Compult_pso_fu_348_ap_idle,
        ap_ready => grp_Compult_pso_fu_348_ap_ready,
        G_0_V_read => grp_Compult_pso_fu_348_G_0_V_read,
        G_1_V_read => grp_Compult_pso_fu_348_G_1_V_read,
        b_0_V_read => grp_Compult_pso_fu_348_b_0_V_read,
        b_1_V_read => grp_Compult_pso_fu_348_b_1_V_read,
        b_2_V_read => grp_Compult_pso_fu_348_b_2_V_read,
        b_3_V_read => grp_Compult_pso_fu_348_b_3_V_read,
        ap_return => grp_Compult_pso_fu_348_ap_return);

    Compult_mul_32s_29ns_61_6_U46 : component Compult_mul_32s_29ns_61_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 29,
        dout_WIDTH => 61)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_414_p0,
        din1 => grp_fu_414_p1,
        ce => grp_fu_414_ce,
        dout => grp_fu_414_p2);

    Compult_mul_22ns_30s_52_3_U47 : component Compult_mul_22ns_30s_52_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 22,
        din1_WIDTH => 30,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        ce => grp_fu_422_ce,
        dout => grp_fu_422_p2);

    Compult_mul_36s_29ns_65_6_U48 : component Compult_mul_36s_29ns_65_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 36,
        din1_WIDTH => 29,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_813_p0,
        din1 => grp_fu_813_p1,
        ce => grp_fu_813_ce,
        dout => grp_fu_813_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv27_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_Compult_pso_fu_348_ap_done)))) then 
                    ap_return_preg <= grp_Compult_pso_fu_348_ap_return;
                end if; 
            end if;
        end if;
    end process;


    -- grp_Compult_pso_fu_348_ap_start_ap_start_reg assign process. --
    grp_Compult_pso_fu_348_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Compult_pso_fu_348_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond8_fu_656_p2)))) then 
                    grp_Compult_pso_fu_348_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Compult_pso_fu_348_ap_ready)) then 
                    grp_Compult_pso_fu_348_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_277 assign process. --
    i_1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond6_fu_393_p2 = ap_const_lv1_0)))) then 
                i_1_reg_277 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                i_1_reg_277 <= i_5_reg_1268;
            end if; 
        end if;
    end process;

    -- i_2_reg_312 assign process. --
    i_2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond7_fu_510_p2)))) then 
                i_2_reg_312 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                i_2_reg_312 <= i_4_reg_1332;
            end if; 
        end if;
    end process;

    -- i_reg_266 assign process. --
    i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                i_reg_266 <= i_3_reg_1180;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_336 assign process. --
    j_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond8_fu_656_p2))) then 
                j_reg_336 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
                j_reg_336 <= j_1_reg_1345;
            end if; 
        end if;
    end process;

    -- p_Val2_2_reg_324 assign process. --
    p_Val2_2_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond8_fu_656_p2))) then 
                p_Val2_2_reg_324 <= ap_const_lv36_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
                p_Val2_2_reg_324 <= sum_V_fu_1069_p3;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                Ep_V_load_reg_1384 <= Ep_V_q0;
                g_V_load_reg_1379 <= g_V_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                G_V_0_s_reg_288 <= G_1_V_1_fu_1125_p3;
                G_V_1_s_reg_300 <= G_1_V_2_fu_1132_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                OP2_V_1_cast_reg_1166 <= OP2_V_1_cast_fu_384_p1;
                OP2_V_cast_reg_1161 <= OP2_V_cast_fu_380_p1;
                p_Val2_6_reg_1155 <= p_Val2_6_fu_374_p2;
                p_Val2_s_reg_1149 <= p_Val2_s_fu_368_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                Range1_all_ones_1_reg_1435 <= Range1_all_ones_1_fu_932_p2;
                Range1_all_zeros_reg_1442 <= Range1_all_zeros_fu_938_p2;
                p_41_i_i_reg_1447 <= p_41_i_i_fu_950_p2;
                p_Val2_37_reg_1420 <= p_Val2_36_fu_843_p2(57 downto 22);
                qb_assign_5_reg_1430 <= qb_assign_5_fu_893_p2;
                signbit_2_reg_1414 <= p_Val2_36_fu_843_p2(64 downto 64);
                tmp_72_reg_1425 <= p_Val2_36_fu_843_p2(57 downto 57);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                Sx_0_load_reg_1200 <= Sx_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                Sx_1_load_reg_1215 <= Sx_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                deleted_ones_1_reg_1469 <= deleted_ones_1_fu_989_p3;
                deleted_zeros_1_reg_1464 <= deleted_zeros_1_fu_983_p3;
                newsignbit_6_reg_1458 <= p_Val2_38_fu_959_p2(35 downto 35);
                p_38_i_i_reg_1474 <= p_38_i_i_fu_995_p2;
                p_Val2_38_reg_1452 <= p_Val2_38_fu_959_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_1_cast8_reg_1260(0) <= i_1_cast8_fu_505_p1(0);
    i_1_cast8_reg_1260(1) <= i_1_cast8_fu_505_p1(1);
    i_1_cast8_reg_1260(2) <= i_1_cast8_fu_505_p1(2);
    i_1_cast8_reg_1260(3) <= i_1_cast8_fu_505_p1(3);
    i_1_cast8_reg_1260(4) <= i_1_cast8_fu_505_p1(4);
                i_5_reg_1268 <= i_5_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_3_reg_1180 <= i_3_fu_399_p2;
                i_cast9_reg_1171(0) <= i_cast9_fu_388_p1(0);
    i_cast9_reg_1171(1) <= i_cast9_fu_388_p1(1);
    i_cast9_reg_1171(2) <= i_cast9_fu_388_p1(2);
    i_cast9_reg_1171(3) <= i_cast9_fu_388_p1(3);
    i_cast9_reg_1171(4) <= i_cast9_fu_388_p1(4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                i_4_reg_1332 <= i_4_fu_662_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                j_1_reg_1345 <= j_1_fu_713_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                newsignbit_reg_1314 <= p_Val2_33_fu_603_p2(35 downto 35);
                p_Result_1_not_reg_1319 <= p_Result_1_not_fu_617_p2;
                p_Val2_33_reg_1309 <= p_Val2_33_fu_603_p2;
                p_not_i_reg_1324 <= p_not_i_fu_633_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                overflow_5_reg_1480 <= overflow_5_fu_1015_p2;
                underflow_14_not_reg_1491 <= underflow_14_not_fu_1047_p2;
                underflow_6_reg_1485 <= underflow_6_fu_1036_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond_fu_707_p2)))) then
                overflow_6_reg_1360 <= overflow_6_fu_773_p2;
                tmp_68_reg_1373 <= tmp_68_fu_803_p1;
                underflow_reg_1366 <= underflow_fu_797_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                p_Val2_1_reg_1230 <= grp_fu_422_p2;
                p_Val2_7_reg_1225 <= grp_fu_414_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                p_Val2_30_reg_1278 <= p_Val2_30_fu_534_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                p_Val2_35_reg_1399 <= grp_fu_813_p2;
                qbit_5_reg_1404 <= grp_fu_813_p2(21 downto 21);
                tmp_71_reg_1409 <= tmp_71_fu_827_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond8_fu_656_p2))) then
                p_addr_reg_1337(2) <= p_addr_fu_692_p2(2);
    p_addr_reg_1337(3) <= p_addr_fu_692_p2(3);
    p_addr_reg_1337(4) <= p_addr_fu_692_p2(4);
    p_addr_reg_1337(5) <= p_addr_fu_692_p2(5);
    p_addr_reg_1337(6) <= p_addr_fu_692_p2(6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                qb_assign_1_reg_1255 <= qb_assign_1_fu_483_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                qb_assign_3_reg_1304 <= qb_assign_3_fu_593_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                qbit_4_reg_1294 <= p_Val2_31_fu_539_p2(10 downto 10);
                r_i_i1_reg_1299 <= r_i_i1_fu_587_p2;
                signbit_reg_1283 <= p_Val2_31_fu_539_p2(39 downto 39);
                tmp_60_reg_1289 <= p_Val2_31_fu_539_p2(39 downto 11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                qbit_reg_1240 <= p_Val2_8_fu_438_p2(36 downto 36);
                r_reg_1245 <= r_fu_465_p2;
                tmp_57_reg_1250 <= p_Val2_8_fu_438_p2(37 downto 37);
                tmp_reg_1235 <= p_Val2_8_fu_438_p2(60 downto 37);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond6_fu_393_p2 = ap_const_lv1_0)))) then
                tmp_12_cast_cast_reg_1195(0) <= tmp_12_cast_cast_fu_408_p1(0);
    tmp_12_cast_cast_reg_1195(1) <= tmp_12_cast_cast_fu_408_p1(1);
    tmp_12_cast_cast_reg_1195(2) <= tmp_12_cast_cast_fu_408_p1(2);
    tmp_12_cast_cast_reg_1195(3) <= tmp_12_cast_cast_fu_408_p1(3);
    tmp_12_cast_cast_reg_1195(4) <= tmp_12_cast_cast_fu_408_p1(4);
    tmp_12_cast_cast_reg_1195(5) <= tmp_12_cast_cast_fu_408_p1(5);
    tmp_12_cast_cast_reg_1195(6) <= tmp_12_cast_cast_fu_408_p1(6);
    tmp_12_cast_cast_reg_1195(7) <= tmp_12_cast_cast_fu_408_p1(7);
    tmp_12_cast_cast_reg_1195(8) <= tmp_12_cast_cast_fu_408_p1(8);
    tmp_12_cast_cast_reg_1195(9) <= tmp_12_cast_cast_fu_408_p1(9);
    tmp_12_cast_cast_reg_1195(10) <= tmp_12_cast_cast_fu_408_p1(10);
    tmp_12_cast_cast_reg_1195(11) <= tmp_12_cast_cast_fu_408_p1(11);
    tmp_12_cast_cast_reg_1195(12) <= tmp_12_cast_cast_fu_408_p1(12);
    tmp_12_cast_cast_reg_1195(13) <= tmp_12_cast_cast_fu_408_p1(13);
    tmp_12_cast_cast_reg_1195(14) <= tmp_12_cast_cast_fu_408_p1(14);
    tmp_12_cast_cast_reg_1195(15) <= tmp_12_cast_cast_fu_408_p1(15);
    tmp_12_cast_cast_reg_1195(16) <= tmp_12_cast_cast_fu_408_p1(16);
    tmp_12_cast_cast_reg_1195(17) <= tmp_12_cast_cast_fu_408_p1(17);
    tmp_12_cast_cast_reg_1195(18) <= tmp_12_cast_cast_fu_408_p1(18);
    tmp_12_cast_cast_reg_1195(19) <= tmp_12_cast_cast_fu_408_p1(19);
    tmp_12_cast_cast_reg_1195(20) <= tmp_12_cast_cast_fu_408_p1(20);
    tmp_12_cast_cast_reg_1195(21) <= tmp_12_cast_cast_fu_408_p1(21);
    tmp_12_cast_cast_reg_1195(22) <= tmp_12_cast_cast_fu_408_p1(22);
    tmp_12_cast_cast_reg_1195(23) <= tmp_12_cast_cast_fu_408_p1(23);
    tmp_12_cast_cast_reg_1195(24) <= tmp_12_cast_cast_fu_408_p1(24);
    tmp_12_cast_cast_reg_1195(25) <= tmp_12_cast_cast_fu_408_p1(25);
    tmp_12_cast_cast_reg_1195(26) <= tmp_12_cast_cast_fu_408_p1(26);
    tmp_12_cast_cast_reg_1195(27) <= tmp_12_cast_cast_fu_408_p1(27);
                tmp_7_cast_reg_1190(0) <= tmp_7_cast_fu_405_p1(0);
    tmp_7_cast_reg_1190(1) <= tmp_7_cast_fu_405_p1(1);
    tmp_7_cast_reg_1190(2) <= tmp_7_cast_fu_405_p1(2);
    tmp_7_cast_reg_1190(3) <= tmp_7_cast_fu_405_p1(3);
    tmp_7_cast_reg_1190(4) <= tmp_7_cast_fu_405_p1(4);
    tmp_7_cast_reg_1190(5) <= tmp_7_cast_fu_405_p1(5);
    tmp_7_cast_reg_1190(6) <= tmp_7_cast_fu_405_p1(6);
    tmp_7_cast_reg_1190(7) <= tmp_7_cast_fu_405_p1(7);
    tmp_7_cast_reg_1190(8) <= tmp_7_cast_fu_405_p1(8);
    tmp_7_cast_reg_1190(9) <= tmp_7_cast_fu_405_p1(9);
    tmp_7_cast_reg_1190(10) <= tmp_7_cast_fu_405_p1(10);
    tmp_7_cast_reg_1190(11) <= tmp_7_cast_fu_405_p1(11);
    tmp_7_cast_reg_1190(12) <= tmp_7_cast_fu_405_p1(12);
    tmp_7_cast_reg_1190(13) <= tmp_7_cast_fu_405_p1(13);
    tmp_7_cast_reg_1190(14) <= tmp_7_cast_fu_405_p1(14);
    tmp_7_cast_reg_1190(15) <= tmp_7_cast_fu_405_p1(15);
    tmp_7_cast_reg_1190(16) <= tmp_7_cast_fu_405_p1(16);
    tmp_7_cast_reg_1190(17) <= tmp_7_cast_fu_405_p1(17);
    tmp_7_cast_reg_1190(18) <= tmp_7_cast_fu_405_p1(18);
    tmp_7_cast_reg_1190(19) <= tmp_7_cast_fu_405_p1(19);
    tmp_7_cast_reg_1190(20) <= tmp_7_cast_fu_405_p1(20);
    tmp_7_cast_reg_1190(21) <= tmp_7_cast_fu_405_p1(21);
    tmp_7_cast_reg_1190(22) <= tmp_7_cast_fu_405_p1(22);
    tmp_7_cast_reg_1190(23) <= tmp_7_cast_fu_405_p1(23);
    tmp_7_cast_reg_1190(24) <= tmp_7_cast_fu_405_p1(24);
    tmp_7_cast_reg_1190(25) <= tmp_7_cast_fu_405_p1(25);
    tmp_7_cast_reg_1190(26) <= tmp_7_cast_fu_405_p1(26);
    tmp_7_cast_reg_1190(27) <= tmp_7_cast_fu_405_p1(27);
            end if;
        end if;
    end process;
    i_cast9_reg_1171(31 downto 5) <= "000000000000000000000000000";
    tmp_7_cast_reg_1190(39 downto 28) <= "000000000000";
    tmp_12_cast_cast_reg_1195(39 downto 28) <= "000000000000";
    i_1_cast8_reg_1260(31 downto 5) <= "000000000000000000000000000";
    p_addr_reg_1337(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond6_fu_393_p2, exitcond7_fu_510_p2, exitcond8_fu_656_p2, exitcond_fu_707_p2, grp_Compult_pso_fu_348_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond6_fu_393_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_510_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st19_fsm_18 => 
                if ((ap_const_lv1_0 = exitcond8_fu_656_p2)) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (not((ap_const_lv1_0 = exitcond_fu_707_p2))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st33_fsm_32 => 
                if (not((ap_const_logic_0 = grp_Compult_pso_fu_348_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- Ep_V_address0 assign process. --
    Ep_V_address0_assign_proc : process(i_1_cast8_reg_1260, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st18_fsm_17, j_cast6_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            Ep_V_address0 <= i_1_cast8_reg_1260(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            Ep_V_address0 <= j_cast6_fu_698_p1(5 - 1 downto 0);
        else 
            Ep_V_address0 <= "XXXXX";
        end if; 
    end process;


    -- Ep_V_ce0 assign process. --
    Ep_V_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            Ep_V_ce0 <= ap_const_logic_1;
        else 
            Ep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Ep_V_d0 <= 
        ap_const_lv36_7FFFFFFFF when (overflow_fu_643_p2(0) = '1') else 
        p_Val2_33_reg_1309;

    -- Ep_V_we0 assign process. --
    Ep_V_we0_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            Ep_V_we0 <= ap_const_logic_1;
        else 
            Ep_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    G_0_V_fu_1117_p3 <= 
        p_Val2_87_mux_fu_1102_p3 when (brmerge3_fu_1097_p2(0) = '1') else 
        p_Val2_s_51_fu_1110_p3;
    G_1_V_1_fu_1125_p3 <= 
        G_V_0_s_reg_288 when (tmp_68_reg_1373(0) = '1') else 
        G_0_V_fu_1117_p3;
    G_1_V_2_fu_1132_p3 <= 
        G_0_V_fu_1117_p3 when (tmp_68_reg_1373(0) = '1') else 
        G_V_1_s_reg_300;
        OP2_V_1_cast_fu_384_p1 <= std_logic_vector(resize(signed(dx2_in_V),52));

        OP2_V_cast_fu_380_p1 <= std_logic_vector(resize(signed(dx1_in_V),61));

    Range1_all_ones_1_fu_932_p2 <= "1" when (tmp_77_fu_922_p4 = ap_const_lv7_7F) else "0";
    Range1_all_zeros_fu_938_p2 <= "1" when (tmp_77_fu_922_p4 = ap_const_lv7_0) else "0";
    Range2_all_ones_fu_916_p2 <= "1" when (tmp_76_fu_906_p4 = ap_const_lv6_3F) else "0";

    -- SxDx_V_address0 assign process. --
    SxDx_V_address0_assign_proc : process(i_cast9_reg_1171, i_1_cast8_fu_505_p1, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            SxDx_V_address0 <= i_cast9_reg_1171(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            SxDx_V_address0 <= i_1_cast8_fu_505_p1(5 - 1 downto 0);
        else 
            SxDx_V_address0 <= "XXXXX";
        end if; 
    end process;


    -- SxDx_V_ce0 assign process. --
    SxDx_V_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            SxDx_V_ce0 <= ap_const_logic_1;
        else 
            SxDx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        SxDx_V_d0 <= std_logic_vector(resize(signed(p_Val2_29_fu_494_p2),26));


    -- SxDx_V_we0 assign process. --
    SxDx_V_we0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            SxDx_V_we0 <= ap_const_logic_1;
        else 
            SxDx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Sx_0_address0 <= i_cast9_fu_388_p1(5 - 1 downto 0);

    -- Sx_0_ce0 assign process. --
    Sx_0_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            Sx_0_ce0 <= ap_const_logic_1;
        else 
            Sx_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Sx_1_address0 <= i_cast9_reg_1171(5 - 1 downto 0);

    -- Sx_1_ce0 assign process. --
    Sx_1_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            Sx_1_ce0 <= ap_const_logic_1;
        else 
            Sx_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_Compult_pso_fu_348_ap_done, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_Compult_pso_fu_348_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_Compult_pso_fu_348_ap_done, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_Compult_pso_fu_348_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(grp_Compult_pso_fu_348_ap_done, grp_Compult_pso_fu_348_ap_return, ap_sig_cseq_ST_st33_fsm_32, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_Compult_pso_fu_348_ap_done)))) then 
            ap_return <= grp_Compult_pso_fu_348_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_127 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_136 assign process. --
    ap_sig_bdd_136_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_136 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_171 assign process. --
    ap_sig_bdd_171_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_171 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_231 assign process. --
    ap_sig_bdd_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_231 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_246 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_255 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_270 assign process. --
    ap_sig_bdd_270_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_270 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_284 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_307 assign process. --
    ap_sig_bdd_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_307 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_318 assign process. --
    ap_sig_bdd_318_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_318 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_329 assign process. --
    ap_sig_bdd_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_329 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_342 assign process. --
    ap_sig_bdd_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_342 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_363 assign process. --
    ap_sig_bdd_363_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_363 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_380 assign process. --
    ap_sig_bdd_380_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_380 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_393 assign process. --
    ap_sig_bdd_393_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_393 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_402 assign process. --
    ap_sig_bdd_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_402 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_446 assign process. --
    ap_sig_bdd_446_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_446 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_455 assign process. --
    ap_sig_bdd_455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_455 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_480 assign process. --
    ap_sig_bdd_480_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_480 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_51 assign process. --
    ap_sig_bdd_51_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_51 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_446)
    begin
        if (ap_sig_bdd_446) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_231)
    begin
        if (ap_sig_bdd_231) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_246)
    begin
        if (ap_sig_bdd_246) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_255)
    begin
        if (ap_sig_bdd_255) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_455)
    begin
        if (ap_sig_bdd_455) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_270)
    begin
        if (ap_sig_bdd_270) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_51)
    begin
        if (ap_sig_bdd_51) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_284)
    begin
        if (ap_sig_bdd_284) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_307)
    begin
        if (ap_sig_bdd_307) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_318)
    begin
        if (ap_sig_bdd_318) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_329)
    begin
        if (ap_sig_bdd_329) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_342)
    begin
        if (ap_sig_bdd_342) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_363)
    begin
        if (ap_sig_bdd_363) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_380)
    begin
        if (ap_sig_bdd_380) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_393)
    begin
        if (ap_sig_bdd_393) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_402)
    begin
        if (ap_sig_bdd_402) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_480)
    begin
        if (ap_sig_bdd_480) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_127)
    begin
        if (ap_sig_bdd_127) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_136)
    begin
        if (ap_sig_bdd_136) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_171)
    begin
        if (ap_sig_bdd_171) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i_fu_791_p2 <= (p_not38_i_fu_785_p2 or newsignbit_0_not_i_fu_779_p2);
    brmerge3_fu_1097_p2 <= (overflow_6_reg_1360 or underflow_15_not_fu_1092_p2);
    brmerge40_demorgan_i_i_fu_1021_p2 <= (newsignbit_6_reg_1458 and deleted_ones_1_reg_1469);
    brmerge_i5_fu_639_p2 <= (newsignbit_reg_1314 or p_not_i_reg_1324);
    brmerge_i_fu_761_p2 <= (newsignbit_7_fu_737_p3 or p_not_i4_fu_755_p2);
    brmerge_i_i3_fu_1088_p2 <= (underflow_reg_1366 or overflow_6_reg_1360);
    brmerge_i_i4_fu_1005_p2 <= (newsignbit_6_reg_1458 or p_not_i_i_fu_1000_p2);
    brmerge_i_i_i_fu_1052_p2 <= (underflow_6_reg_1485 or overflow_5_reg_1480);
    carry_fu_978_p2 <= (tmp_72_reg_1425 and tmp_20_fu_972_p2);
    deleted_ones_1_fu_989_p3 <= 
        p_41_i_i_reg_1447 when (carry_fu_978_p2(0) = '1') else 
        Range1_all_ones_1_reg_1435;
    deleted_zeros_1_fu_983_p3 <= 
        Range1_all_ones_1_reg_1435 when (carry_fu_978_p2(0) = '1') else 
        Range1_all_zeros_reg_1442;
    deleted_zeros_fu_628_p2 <= (signbit_reg_1283 xor not_carry_fu_622_p2);
    exitcond6_fu_393_p2 <= "1" when (i_reg_266 = ap_const_lv5_14) else "0";
    exitcond7_fu_510_p2 <= "1" when (i_1_reg_277 = ap_const_lv5_14) else "0";
    exitcond8_fu_656_p2 <= "1" when (i_2_reg_312 = ap_const_lv2_2) else "0";
    exitcond_fu_707_p2 <= "1" when (j_reg_336 = ap_const_lv5_14) else "0";
    g_V_address0 <= p_addr1_cast_fu_724_p1(6 - 1 downto 0);

    -- g_V_ce0 assign process. --
    g_V_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            g_V_ce0 <= ap_const_logic_1;
        else 
            g_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Compult_pso_fu_348_G_0_V_read <= G_V_0_s_reg_288;
    grp_Compult_pso_fu_348_G_1_V_read <= G_V_1_s_reg_300;
    grp_Compult_pso_fu_348_ap_start <= grp_Compult_pso_fu_348_ap_start_ap_start_reg;
    grp_Compult_pso_fu_348_b_0_V_read <= p_Val2_s_reg_1149;
    grp_Compult_pso_fu_348_b_1_V_read <= p_Val2_s_reg_1149;
    grp_Compult_pso_fu_348_b_2_V_read <= p_Val2_6_reg_1155;
    grp_Compult_pso_fu_348_b_3_V_read <= p_Val2_6_reg_1155;
    grp_fu_414_ce <= ap_const_logic_1;
    grp_fu_414_p0 <= OP2_V_cast_reg_1161(32 - 1 downto 0);
    grp_fu_414_p1 <= grp_fu_414_p10(29 - 1 downto 0);
    grp_fu_414_p10 <= std_logic_vector(resize(unsigned(Sx_0_load_reg_1200),61));
    grp_fu_422_ce <= ap_const_logic_1;
    grp_fu_422_p0 <= grp_fu_422_p00(22 - 1 downto 0);
    grp_fu_422_p00 <= std_logic_vector(resize(unsigned(Sx_1_load_reg_1215),52));
    grp_fu_422_p1 <= OP2_V_1_cast_reg_1166(30 - 1 downto 0);
    grp_fu_813_ce <= ap_const_logic_1;
    grp_fu_813_p0 <= Ep_V_load_reg_1384;
    grp_fu_813_p1 <= grp_fu_813_p10(29 - 1 downto 0);
    grp_fu_813_p10 <= std_logic_vector(resize(unsigned(g_V_load_reg_1379),65));
    i_1_cast8_fu_505_p1 <= std_logic_vector(resize(unsigned(i_1_reg_277),32));
    i_3_fu_399_p2 <= std_logic_vector(unsigned(i_reg_266) + unsigned(ap_const_lv5_1));
    i_4_fu_662_p2 <= std_logic_vector(unsigned(i_2_reg_312) + unsigned(ap_const_lv2_1));
    i_5_fu_516_p2 <= std_logic_vector(unsigned(i_1_reg_277) + unsigned(ap_const_lv5_1));
    i_cast9_fu_388_p1 <= std_logic_vector(resize(unsigned(i_reg_266),32));
    isneg_fu_729_p3 <= p_Val2_2_reg_324(35 downto 35);
    j_1_fu_713_p2 <= std_logic_vector(unsigned(j_reg_336) + unsigned(ap_const_lv5_1));
    j_cast6_cast_fu_703_p1 <= std_logic_vector(resize(unsigned(j_reg_336),7));
    j_cast6_fu_698_p1 <= std_logic_vector(resize(unsigned(j_reg_336),32));
    newsignbit_0_not_i_fu_779_p2 <= (newsignbit_7_fu_737_p3 xor ap_const_lv1_1);
    newsignbit_6_fu_964_p3 <= p_Val2_38_fu_959_p2(35 downto 35);
    newsignbit_7_fu_737_p3 <= p_Val2_2_reg_324(26 downto 26);
    newsignbit_fu_609_p3 <= p_Val2_33_fu_603_p2(35 downto 35);
    not_carry_fu_622_p2 <= (newsignbit_fu_609_p3 or p_Result_1_not_fu_617_p2);
    overflow_5_fu_1015_p2 <= (brmerge_i_i4_fu_1005_p2 and tmp_24_fu_1010_p2);
    overflow_6_fu_773_p2 <= (brmerge_i_fu_761_p2 and tmp_17_fu_767_p2);
    overflow_fu_643_p2 <= (brmerge_i5_fu_639_p2 and p_Result_1_not_reg_1319);
    p_38_i_i_fu_995_p2 <= (carry_fu_978_p2 and Range1_all_ones_1_reg_1435);
    p_41_i_i_fu_950_p2 <= (Range2_all_ones_fu_916_p2 and tmp_23_fu_944_p2);
    p_Result_1_not_fu_617_p2 <= (signbit_reg_1283 xor ap_const_lv1_1);
    p_Result_7_fu_745_p4 <= p_Val2_2_reg_324(35 downto 27);
    p_Val2_29_fu_494_p2 <= std_logic_vector(signed(p_Val2_9_cast_cast_fu_488_p1) + signed(tmp_6_cast_cast_fu_491_p1));
    p_Val2_2_50_fu_1063_p3 <= 
        ap_const_lv36_800000000 when (underflow_6_reg_1485(0) = '1') else 
        p_Val2_38_reg_1452;
    p_Val2_30_fu_534_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1190) - unsigned(tmp_10_cast_cast_fu_530_p1));
    p_Val2_31_fu_539_p2 <= std_logic_vector(signed(p_Val2_30_reg_1278) - signed(tmp_12_cast_cast_reg_1195));
        p_Val2_32_fu_597_p1 <= std_logic_vector(resize(signed(tmp_60_reg_1289),36));

    p_Val2_33_fu_603_p2 <= std_logic_vector(signed(p_Val2_32_fu_597_p1) + signed(tmp_14_fu_600_p1));
    p_Val2_34_fu_1080_p3 <= (tmp_66_fu_1076_p1 & ap_const_lv1_0);
    p_Val2_36_fu_843_p2 <= std_logic_vector(signed(tmp_21_cast_cast_fu_839_p1) + signed(p_Val2_35_reg_1399));
    p_Val2_38_fu_959_p2 <= std_logic_vector(unsigned(p_Val2_37_reg_1420) + unsigned(tmp_19_fu_956_p1));
    p_Val2_6_fu_374_p2 <= std_logic_vector(signed(ap_const_lv31_79999A00) - signed(tmp_s_fu_364_p1));
    p_Val2_87_mux_fu_1102_p3 <= 
        ap_const_lv28_7FFFFFF when (brmerge_i_i3_fu_1088_p2(0) = '1') else 
        p_Val2_34_fu_1080_p3;
    p_Val2_8_fu_438_p2 <= std_logic_vector(signed(tmp_5_cast_fu_434_p1) + signed(p_Val2_7_reg_1225));
    p_Val2_91_mux_fu_1056_p3 <= 
        ap_const_lv36_7FFFFFFFF when (brmerge_i_i_i_fu_1052_p2(0) = '1') else 
        p_Val2_38_reg_1452;
        p_Val2_9_cast_cast_fu_488_p1 <= std_logic_vector(resize(signed(tmp_reg_1235),25));

    p_Val2_s_51_fu_1110_p3 <= 
        ap_const_lv28_8000000 when (underflow_reg_1366(0) = '1') else 
        p_Val2_34_fu_1080_p3;
    p_Val2_s_fu_368_p2 <= std_logic_vector(signed(tmp_s_fu_364_p1) + signed(ap_const_lv31_79999A00));
    p_addr1_cast_fu_724_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_719_p2),32));
    p_addr1_fu_719_p2 <= std_logic_vector(unsigned(p_addr_reg_1337) + unsigned(j_cast6_cast_fu_703_p1));
    p_addr_fu_692_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_676_p1) + unsigned(p_shl1_cast_fu_688_p1));
    p_not38_i_fu_785_p2 <= "0" when (p_Result_7_fu_745_p4 = ap_const_lv9_1FF) else "1";
    p_not_i4_fu_755_p2 <= "0" when (p_Result_7_fu_745_p4 = ap_const_lv9_0) else "1";
    p_not_i_fu_633_p2 <= (deleted_zeros_fu_628_p2 xor ap_const_lv1_1);
    p_not_i_i_fu_1000_p2 <= (deleted_zeros_1_reg_1464 xor ap_const_lv1_1);
    p_shl1_cast_fu_688_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_680_p3),7));
    p_shl_cast_fu_676_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_668_p3),7));
    qb_assign_1_fu_483_p2 <= (r_i_i_fu_479_p2 and qbit_reg_1240);
    qb_assign_3_fu_593_p2 <= (r_i_i1_reg_1299 and qbit_4_reg_1294);
    qb_assign_5_fu_893_p2 <= (r_i_i_i_fu_887_p2 and qbit_5_reg_1404);
    r_3_fu_573_p2 <= "0" when (tmp_62_fu_569_p1 = ap_const_lv10_0) else "1";
    r_4_fu_866_p2 <= "0" when (tmp_71_reg_1409 = ap_const_lv21_0) else "1";
    r_fu_465_p2 <= "0" when (tmp_56_fu_461_p1 = ap_const_lv36_0) else "1";
    r_i_i1_fu_587_p2 <= (tmp_63_fu_579_p3 or r_3_fu_573_p2);
    r_i_i_fu_479_p2 <= (tmp_57_reg_1250 or r_reg_1245);
    r_i_i_i_fu_887_p2 <= (tmp_73_fu_879_p3 or r_4_fu_866_p2);
    sum_V_fu_1069_p3 <= 
        p_Val2_91_mux_fu_1056_p3 when (underflow_14_not_reg_1491(0) = '1') else 
        p_Val2_2_50_fu_1063_p3;
    tmp4_demorgan_fu_1025_p2 <= (p_38_i_i_reg_1474 or brmerge40_demorgan_i_i_fu_1021_p2);
    tmp4_fu_1030_p2 <= (tmp4_demorgan_fu_1025_p2 xor ap_const_lv1_1);
    tmp5_fu_1041_p2 <= (brmerge40_demorgan_i_i_fu_1021_p2 or tmp_24_fu_1010_p2);
        tmp_10_cast_cast_fu_530_p1 <= std_logic_vector(resize(signed(tmp_58_fu_522_p3),40));

    tmp_12_cast_cast_fu_408_p1 <= std_logic_vector(resize(unsigned(y_in_V),40));
    tmp_14_fu_600_p1 <= std_logic_vector(resize(unsigned(qb_assign_3_reg_1304),36));
    tmp_17_fu_767_p2 <= (isneg_fu_729_p3 xor ap_const_lv1_1);
    tmp_18_fu_831_p3 <= (p_Val2_2_reg_324 & ap_const_lv22_0);
    tmp_19_fu_956_p1 <= std_logic_vector(resize(unsigned(qb_assign_5_reg_1430),36));
    tmp_20_fu_972_p2 <= (newsignbit_6_fu_964_p3 xor ap_const_lv1_1);
        tmp_21_cast_cast_fu_839_p1 <= std_logic_vector(resize(signed(tmp_18_fu_831_p3),65));

    tmp_21_fu_668_p3 <= (i_2_reg_312 & ap_const_lv4_0);
    tmp_22_fu_680_p3 <= (i_2_reg_312 & ap_const_lv2_0);
    tmp_23_fu_944_p2 <= (tmp_75_fu_898_p3 xor ap_const_lv1_1);
    tmp_24_fu_1010_p2 <= (signbit_2_reg_1414 xor ap_const_lv1_1);
    tmp_56_fu_461_p1 <= p_Val2_8_fu_438_p2(36 - 1 downto 0);
    tmp_58_fu_522_p3 <= (SxDx_V_q0 & ap_const_lv11_0);
        tmp_5_cast_fu_434_p1 <= std_logic_vector(resize(signed(tmp_5_fu_427_p3),61));

    tmp_5_fu_427_p3 <= (p_Val2_1_reg_1230 & ap_const_lv2_0);
    tmp_62_fu_569_p1 <= p_Val2_31_fu_539_p2(10 - 1 downto 0);
    tmp_63_fu_579_p3 <= p_Val2_31_fu_539_p2(11 downto 11);
    tmp_66_fu_1076_p1 <= p_Val2_2_reg_324(27 - 1 downto 0);
    tmp_68_fu_803_p1 <= i_2_reg_312(1 - 1 downto 0);
    tmp_6_cast_cast_fu_491_p1 <= std_logic_vector(resize(unsigned(qb_assign_1_reg_1255),25));
    tmp_71_fu_827_p1 <= grp_fu_813_p2(21 - 1 downto 0);
    tmp_73_fu_879_p3 <= p_Val2_36_fu_843_p2(22 downto 22);
    tmp_75_fu_898_p3 <= p_Val2_36_fu_843_p2(58 downto 58);
    tmp_76_fu_906_p4 <= p_Val2_36_fu_843_p2(64 downto 59);
    tmp_77_fu_922_p4 <= p_Val2_36_fu_843_p2(64 downto 58);
    tmp_7_cast_fu_405_p1 <= std_logic_vector(resize(unsigned(ref_in_V),40));
        tmp_s_fu_364_p1 <= std_logic_vector(resize(signed(u_in_V),31));

    underflow_14_not_fu_1047_p2 <= (tmp5_fu_1041_p2 or p_38_i_i_reg_1474);
    underflow_15_not_fu_1092_p2 <= (underflow_reg_1366 xor ap_const_lv1_1);
    underflow_6_fu_1036_p2 <= (signbit_2_reg_1414 and tmp4_fu_1030_p2);
    underflow_fu_797_p2 <= (brmerge39_i_fu_791_p2 and isneg_fu_729_p3);
end behav;
