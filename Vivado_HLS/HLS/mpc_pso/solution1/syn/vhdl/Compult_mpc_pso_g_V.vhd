-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Compult_mpc_pso_g_V_rom is 
    generic(
             dwidth     : integer := 29; 
             awidth     : integer := 6; 
             mem_size    : integer := 40
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Compult_mpc_pso_g_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000100101110010000011111", 1 => "00000010010101001101100010000", 
    2 => "00000101001011011111100101111", 3 => "00001001000101111100001101000", 
    4 => "00001110000001111101110110100", 5 => "00010011111101000101010011100", 
    6 => "00011010110100111001010111101", 7 => "00100010100111000110101010011", 
    8 => "00101011010001011111011001001", 9 => "00110100110001111011001001010", 
    10 => "00111111000110010110101011101", 11 => "01001010001100110011101111100", 
    12 => "01010110000011011000110110111", 13 => "01100010101000010001001010010", 
    14 => "01101111111001101100001110001", 15 => "01111101110101111101111000000", 
    16 => "10001100011011011110000011111", 17 => "10011011101000101000101010010", 
    18 => "10101011011011111101010111000", 19 => "10111011110011111111011111100", 
    20 => "00000000000000000000000000000", 21 => "00000000100101110010000011111", 
    22 => "00000011011100000100000111110", 23 => "00000111010110100000101110110", 
    24 => "00001100010010100010011000011", 25 => "00010010001101101001110101011", 
    26 => "00011001000101011101111001100", 27 => "00100000110111101011001100010", 
    28 => "00101001100010000011111011000", 29 => "00110011000010011111101011001", 
    30 => "00111101010110111011001101100", 31 => "01001000011101011000010001011", 
    32 => "01010100010011111101011000101", 33 => "01100000111000110101101100000", 
    34 => "01101110001010010000110000000", 35 => "01111100000110100010011001111", 
    36 => "10001010101100000010100101110", 37 => "10011001111001001101001100001", 
    38 => "10101001101100100001111000111", 39 => "10111010000100100100000001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Compult_mpc_pso_g_V is
    generic (
        DataWidth : INTEGER := 29;
        AddressRange : INTEGER := 40;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Compult_mpc_pso_g_V is
    component Compult_mpc_pso_g_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Compult_mpc_pso_g_V_rom_U :  component Compult_mpc_pso_g_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


