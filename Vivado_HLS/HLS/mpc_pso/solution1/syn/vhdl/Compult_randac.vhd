-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Compult_randac is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of Compult_randac is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv38_2D : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000101101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv41_FFFFFFFFFF : STD_LOGIC_VECTOR (40 downto 0) := "01111111111111111111111111111111111111111";
    constant ap_const_lv41_10000000000 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_7FFFF : STD_LOGIC_VECTOR (19 downto 0) := "01111111111111111111";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal seed_V : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100100000";
    signal tmp_5_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal tmp_6_fu_103_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal tmp_13_fu_158_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_13_reg_528 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_162_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_reg_533 : STD_LOGIC_VECTOR (19 downto 0);
    signal isneg_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal tmp_19_fu_207_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_19_reg_544 : STD_LOGIC_VECTOR (24 downto 0);
    signal newsignbit_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_555 : STD_LOGIC_VECTOR (6 downto 0);
    signal overflow_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal underflow_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_reg_574 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal isneg_1_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_588 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_593 : STD_LOGIC_VECTOR (16 downto 0);
    signal newsignbit_1_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_1_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_cast_fu_414_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal grp_fu_89_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_89_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_89_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_2_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_173_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_and_t_fu_178_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_not_i_i1_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_i1_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_i1_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_i1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_271_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal brmerge_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_mux_fu_292_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_2_35_fu_300_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_3_fu_307_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_22_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_361_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_1_fu_389_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_3_fu_394_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_fu_400_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_4_fu_406_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal brmerge_i_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_not_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_424_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal brmerge4_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_473_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_7_fu_481_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_89_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component Compult_mul_31s_7ns_38_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    Compult_mul_31s_7ns_38_3_U0 : component Compult_mul_31s_7ns_38_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 7,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_89_p0,
        din1 => grp_fu_89_p1,
        ce => grp_fu_89_ce,
        dout => grp_fu_89_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                isneg_1_reg_581 <= p_Val2_3_fu_307_p3(40 downto 40);
                newsignbit_0_not_i_reg_608 <= newsignbit_0_not_i_fu_377_p2;
                newsignbit_1_reg_598 <= p_Val2_3_fu_307_p3(36 downto 36);
                p_not38_i_reg_613 <= p_not38_i_fu_383_p2;
                p_not_i_reg_603 <= p_not_i_fu_371_p2;
                ret_V_reg_574 <= p_Val2_3_fu_307_p3(40 downto 16);
                tmp_14_reg_593 <= p_Val2_3_fu_307_p3(36 downto 20);
                tmp_3_reg_588 <= tmp_3_fu_337_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                isneg_reg_538 <= p_Val2_1_fu_192_p3(31 downto 31);
                newsignbit_reg_549 <= p_Val2_1_fu_192_p3(24 downto 24);
                p_Result_s_reg_555 <= p_Val2_1_fu_192_p3(31 downto 25);
                tmp_19_reg_544 <= tmp_19_fu_207_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                overflow_reg_561 <= overflow_fu_244_p2;
                underflow_reg_567 <= underflow_fu_266_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                seed_V(5) <= p_Val2_4_cast_fu_414_p1(5);
    seed_V(6) <= p_Val2_4_cast_fu_414_p1(6);
    seed_V(7) <= p_Val2_4_cast_fu_414_p1(7);
    seed_V(8) <= p_Val2_4_cast_fu_414_p1(8);
    seed_V(9) <= p_Val2_4_cast_fu_414_p1(9);
    seed_V(10) <= p_Val2_4_cast_fu_414_p1(10);
    seed_V(11) <= p_Val2_4_cast_fu_414_p1(11);
    seed_V(12) <= p_Val2_4_cast_fu_414_p1(12);
    seed_V(13) <= p_Val2_4_cast_fu_414_p1(13);
    seed_V(14) <= p_Val2_4_cast_fu_414_p1(14);
    seed_V(15) <= p_Val2_4_cast_fu_414_p1(15);
    seed_V(16) <= p_Val2_4_cast_fu_414_p1(16);
    seed_V(17) <= p_Val2_4_cast_fu_414_p1(17);
    seed_V(18) <= p_Val2_4_cast_fu_414_p1(18);
    seed_V(19) <= p_Val2_4_cast_fu_414_p1(19);
    seed_V(20) <= p_Val2_4_cast_fu_414_p1(20);
    seed_V(21) <= p_Val2_4_cast_fu_414_p1(21);
    seed_V(22) <= p_Val2_4_cast_fu_414_p1(22);
    seed_V(23) <= p_Val2_4_cast_fu_414_p1(23);
    seed_V(24) <= p_Val2_4_cast_fu_414_p1(24);
    seed_V(25) <= p_Val2_4_cast_fu_414_p1(25);
    seed_V(26) <= p_Val2_4_cast_fu_414_p1(26);
    seed_V(27) <= p_Val2_4_cast_fu_414_p1(27);
    seed_V(28) <= p_Val2_4_cast_fu_414_p1(28);
    seed_V(29) <= p_Val2_4_cast_fu_414_p1(29);
    seed_V(30) <= p_Val2_4_cast_fu_414_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_10_reg_512 <= grp_fu_89_p2(36 downto 5);
                tmp_4_reg_517 <= grp_fu_89_p2(36 downto 5);
                tmp_5_reg_502 <= grp_fu_89_p2(37 downto 37);
                tmp_6_reg_507 <= tmp_6_fu_103_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_12_reg_523 <= tmp_9_fu_144_p3(31 downto 31);
                tmp_13_reg_528 <= tmp_13_fu_158_p1;
                tmp_16_reg_533 <= tmp_16_fu_162_p1;
            end if;
        end if;
    end process;
    seed_V(4 downto 0) <= "00000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        result_V_fu_473_p3 when (brmerge4_fu_467_p2(0) = '1') else 
        p_Val2_7_fu_481_p3;

    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_46 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_61 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_46)
    begin
        if (ap_sig_bdd_46) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_61)
    begin
        if (ap_sig_bdd_61) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i_fu_446_p2 <= (p_not38_i_reg_613 or newsignbit_0_not_i_reg_608);
    brmerge39_i_i1_fu_260_p2 <= (p_not38_i_i1_fu_255_p2 or newsignbit_0_not_i_i1_fu_250_p2);
    brmerge4_fu_467_p2 <= (overflow_1_fu_440_p2 or underflow_2_not_fu_461_p2);
    brmerge_fu_287_p2 <= (overflow_reg_561 or underflow_not_fu_282_p2);
    brmerge_i_fu_431_p2 <= (newsignbit_1_reg_598 or p_not_i_reg_603);
    brmerge_i_i1_fu_234_p2 <= (newsignbit_reg_549 or p_not_i_i1_fu_229_p2);
    brmerge_i_i2_fu_455_p2 <= (underflow_1_fu_450_p2 or overflow_1_fu_440_p2);
    brmerge_i_i_i1_fu_278_p2 <= (underflow_reg_567 or overflow_reg_561);
    grp_fu_89_ce <= ap_const_logic_1;
    grp_fu_89_p0 <= seed_V;
    grp_fu_89_p1 <= ap_const_lv38_2D(7 - 1 downto 0);
    newsignbit_0_not_i_fu_377_p2 <= (newsignbit_1_fu_353_p3 xor ap_const_lv1_1);
    newsignbit_0_not_i_i1_fu_250_p2 <= (newsignbit_reg_549 xor ap_const_lv1_1);
    newsignbit_1_fu_353_p3 <= p_Val2_3_fu_307_p3(36 downto 36);
    overflow_1_fu_440_p2 <= (brmerge_i_fu_431_p2 and tmp_8_fu_435_p2);
    overflow_fu_244_p2 <= (brmerge_i_i1_fu_234_p2 and tmp_1_fu_239_p2);
    p_3_fu_394_p3 <= 
        ret_V_reg_574 when (tmp_3_reg_588(0) = '1') else 
        ret_V_1_fu_389_p2;
    p_Val2_1_fu_192_p3 <= 
        p_neg_t_fu_186_p2 when (tmp_12_reg_523(0) = '1') else 
        p_and_f_fu_166_p3;
    p_Val2_2_35_fu_300_p3 <= 
        ap_const_lv41_10000000000 when (underflow_reg_567(0) = '1') else 
        p_Val2_2_fu_271_p3;
    p_Val2_2_fu_271_p3 <= (tmp_19_reg_544 & ap_const_lv16_0);
    p_Val2_2_mux_fu_292_p3 <= 
        ap_const_lv41_FFFFFFFFFF when (brmerge_i_i_i1_fu_278_p2(0) = '1') else 
        p_Val2_2_fu_271_p3;
    p_Val2_3_fu_307_p3 <= 
        p_Val2_2_mux_fu_292_p3 when (brmerge_fu_287_p2(0) = '1') else 
        p_Val2_2_35_fu_300_p3;
        p_Val2_4_cast_fu_414_p1 <= std_logic_vector(resize(signed(p_Val2_4_fu_406_p3),31));

    p_Val2_4_fu_406_p3 <= (tmp_s_fu_400_p3 & ap_const_lv5_0);
    p_Val2_5_fu_424_p3 <= (tmp_14_reg_593 & ap_const_lv3_0);
    p_Val2_7_fu_481_p3 <= 
        ap_const_lv20_80000 when (underflow_1_fu_450_p2(0) = '1') else 
        p_Val2_5_fu_424_p3;
    p_and_f_fu_166_p3 <= (ap_const_lv12_0 & tmp_13_reg_528);
    p_and_t_fu_178_p3 <= (ap_const_lv12_0 & tmp_17_fu_173_p2);
    p_neg_t_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_178_p3));
    p_not38_i_fu_383_p2 <= "0" when (tmp_fu_361_p4 = ap_const_lv4_F) else "1";
    p_not38_i_i1_fu_255_p2 <= "0" when (p_Result_s_reg_555 = ap_const_lv7_7F) else "1";
    p_not_i_fu_371_p2 <= "0" when (tmp_fu_361_p4 = ap_const_lv4_0) else "1";
    p_not_i_i1_fu_229_p2 <= "0" when (p_Result_s_reg_555 = ap_const_lv7_0) else "1";
    result_V_fu_473_p3 <= 
        ap_const_lv20_7FFFF when (brmerge_i_i2_fu_455_p2(0) = '1') else 
        p_Val2_5_fu_424_p3;
    ret_V_1_fu_389_p2 <= std_logic_vector(unsigned(ret_V_reg_574) + unsigned(ap_const_lv25_1));
    tmp_11_fu_132_p2 <= std_logic_vector(unsigned(tmp_10_reg_512) + unsigned(ap_const_lv32_1));
    tmp_13_fu_158_p1 <= tmp_9_fu_144_p3(20 - 1 downto 0);
    tmp_16_fu_162_p1 <= tmp_9_fu_144_p3(20 - 1 downto 0);
    tmp_17_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_16_reg_533));
    tmp_19_fu_207_p1 <= p_Val2_1_fu_192_p3(25 - 1 downto 0);
    tmp_1_fu_239_p2 <= (isneg_reg_538 xor ap_const_lv1_1);
    tmp_22_fu_333_p1 <= p_Val2_3_fu_307_p3(16 - 1 downto 0);
    tmp_2_fu_127_p2 <= "1" when (tmp_6_reg_507 = ap_const_lv5_0) else "0";
    tmp_3_fu_337_p2 <= "1" when (tmp_22_fu_333_p1 = ap_const_lv16_0) else "0";
    tmp_6_fu_103_p1 <= grp_fu_89_p2(5 - 1 downto 0);
    tmp_7_fu_137_p3 <= 
        tmp_4_reg_517 when (tmp_2_fu_127_p2(0) = '1') else 
        tmp_11_fu_132_p2;
    tmp_8_fu_435_p2 <= (isneg_1_reg_581 xor ap_const_lv1_1);
    tmp_9_fu_144_p3 <= 
        tmp_7_fu_137_p3 when (tmp_5_reg_502(0) = '1') else 
        tmp_4_reg_517;
    tmp_fu_361_p4 <= p_Val2_3_fu_307_p3(40 downto 37);
    tmp_s_fu_400_p3 <= 
        p_3_fu_394_p3 when (isneg_1_reg_581(0) = '1') else 
        ret_V_reg_574;
    underflow_1_fu_450_p2 <= (brmerge39_i_fu_446_p2 and isneg_1_reg_581);
    underflow_2_not_fu_461_p2 <= (underflow_1_fu_450_p2 xor ap_const_lv1_1);
    underflow_fu_266_p2 <= (brmerge39_i_i1_fu_260_p2 and isneg_reg_538);
    underflow_not_fu_282_p2 <= (underflow_reg_567 xor ap_const_lv1_1);
end behav;
