// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#define AP_INT_MAX_W 32678

#include "ap_fixed.h"


using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_y_in_V  "../tv/cdatafile/c.Compult.autotvin_y_in_V.dat"
   #define AUTOTB_TVIN_ref_in_V  "../tv/cdatafile/c.Compult.autotvin_ref_in_V.dat"
   #define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.Compult.autotvout_ap_return.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.Compult.autotvout_ap_return.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            y_in_V_depth = 0;
            ref_in_V_depth = 0;
            ap_return_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {y_in_V "<< y_in_V_depth << "}\n";
            total_list<<"   {ref_in_V "<< ref_in_V_depth << "}\n";
            total_list<<"   {ap_return "<< ap_return_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int y_in_V_depth;
        int ref_in_V_depth;
        int ap_return_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

#define Compult AESL_ORIG_DUT_Compult
extern ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> Compult ( ap_fixed<32, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> y_in,  ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> ref_in);
#undef Compult
ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> Compult ( ap_fixed<32, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> y_in,  ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> ref_in) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> AESL_return;

        aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //data

            sc_bv<30> ap_return_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    ap_return_pc_buffer = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return)) {

                   exit(1);

                }

            }

            if (i > 0) {

                sc_lv<30> agg_result_V_lv0_0_0_0;

                AESL_i = 0; //subscript for rtl array

                if(&(AESL_return) != 0) {

                   agg_result_V_lv0_0_0_0.range(29, 0) = sc_bv<30>(ap_return_pc_buffer.range(29, 0));

                }

                AESL_i++;

                AESL_i = 0; //subscript for rtl array

                if(&(AESL_return) != 0) {

                   (AESL_return).range() = (agg_result_V_lv0_0_0_0).to_string(SC_BIN).c_str();

                }

                AESL_i++;

                }

        }

        AESL_transaction_pc ++ ;

        return AESL_return;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_y_in_V = new char[50];

        char* tvin_ref_in_V = new char[50];

        char* tvout_ap_return = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_y_in_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_y_in_V, tvin_y_in_V);

        sc_bv<32> y_in_V_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> y_in_V_tmp_mem; 

        if(&(y_in) != 0) {

        y_in_V_tmp_mem = (y_in).range().to_string(SC_BIN).c_str();

           y_in_V_tvin_wrapc_buffer.range(31, 0) = y_in_V_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_y_in_V, "%s\n", (y_in_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_y_in_V, tvin_y_in_V);

        }

        tcl_file.set_num(1,&tcl_file.y_in_V_depth);

        sprintf(tvin_y_in_V, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_y_in_V, tvin_y_in_V);

        sprintf(tvin_ref_in_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_ref_in_V, tvin_ref_in_V);

        sc_bv<30> ref_in_V_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sc_lv<30> ref_in_V_tmp_mem; 

        if(&(ref_in) != 0) {

        ref_in_V_tmp_mem = (ref_in).range().to_string(SC_BIN).c_str();

           ref_in_V_tvin_wrapc_buffer.range(29, 0) = ref_in_V_tmp_mem.range(29, 0 ) ;

        }

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_ref_in_V, "%s\n", (ref_in_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_ref_in_V, tvin_ref_in_V);

        }

        tcl_file.set_num(1,&tcl_file.ref_in_V_depth);

        sprintf(tvin_ref_in_V, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_ref_in_V, tvin_ref_in_V);

        ap_fixed<30, 3, (ap_q_mode) 4, (ap_o_mode)0, 0> AESL_return = AESL_ORIG_DUT_Compult(y_in,ref_in);

        sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        sc_bv<30> ap_return_tvout_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sc_lv<30> agg_result_V_tmp_mem; 

        if(&(AESL_return) != 0) {

        agg_result_V_tmp_mem = (AESL_return).range().to_string(SC_BIN).c_str();

           ap_return_tvout_wrapc_buffer.range(29, 0) = agg_result_V_tmp_mem.range(29, 0 ) ;

        }

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        }

        tcl_file.set_num(1,&tcl_file.ap_return_depth);

        sprintf(tvout_ap_return, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

        delete [] tvin_y_in_V;

        delete [] tvin_ref_in_V;

        delete [] tvout_ap_return;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

        return AESL_return;

    }
}


