// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __Compult_mpc_pso_Sx_0_H__
#define __Compult_mpc_pso_Sx_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Compult_mpc_pso_Sx_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 29;
  static const unsigned AddressRange = 20;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Compult_mpc_pso_Sx_0_ram) {
        ram[0] = "0b00000111111111111111111111110";
        ram[1] = "0b00001111111111111111111110111";
        ram[2] = "0b00010111111111111111111100110";
        ram[3] = "0b00011111111111111111111001001";
        ram[4] = "0b00100111111111111111110011100";
        ram[5] = "0b00101111111111111111101011100";
        ram[6] = "0b00110111111111111111100000111";
        ram[7] = "0b00111111111111111111010011000";
        ram[8] = "0b01000111111111111111000001110";
        ram[9] = "0b01001111111111111110101100101";
        ram[10] = "0b01010111111111111110010011011";
        ram[11] = "0b01011111111111111101110101110";
        ram[12] = "0b01100111111111111101010011011";
        ram[13] = "0b01101111111111111100101011111";
        ram[14] = "0b01110111111111111011111111010";
        ram[15] = "0b01111111111111111011001100111";
        ram[16] = "0b10000111111111111010010100110";
        ram[17] = "0b10001111111111111001010110101";
        ram[18] = "0b10010111111111111000010010000";
        ram[19] = "0b10011111111111110111000111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Compult_mpc_pso_Sx_0) {


static const unsigned DataWidth = 29;
static const unsigned AddressRange = 20;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Compult_mpc_pso_Sx_0_ram* meminst;


SC_CTOR(Compult_mpc_pso_Sx_0) {
meminst = new Compult_mpc_pso_Sx_0_ram("Compult_mpc_pso_Sx_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Compult_mpc_pso_Sx_0() {
    delete meminst;
}


};//endmodule
#endif
